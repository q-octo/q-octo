// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMPANIONRXMESSAGE_FBS_H_
#define FLATBUFFERS_GENERATED_COMPANIONRXMESSAGE_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "robot_state_generated.h"

namespace fbs {

struct SetWebServerEnabled;
struct SetWebServerEnabledBuilder;
struct SetWebServerEnabledT;

struct CompanionRx;
struct CompanionRxBuilder;
struct CompanionRxT;

enum CompanionRxUnion : uint8_t {
  CompanionRxUnion_NONE = 0,
  CompanionRxUnion_SetWebServerEnabled = 1,
  CompanionRxUnion_Robot = 2,
  CompanionRxUnion_MIN = CompanionRxUnion_NONE,
  CompanionRxUnion_MAX = CompanionRxUnion_Robot
};

inline const CompanionRxUnion (&EnumValuesCompanionRxUnion())[3] {
  static const CompanionRxUnion values[] = {
    CompanionRxUnion_NONE,
    CompanionRxUnion_SetWebServerEnabled,
    CompanionRxUnion_Robot
  };
  return values;
}

inline const char * const *EnumNamesCompanionRxUnion() {
  static const char * const names[4] = {
    "NONE",
    "SetWebServerEnabled",
    "Robot",
    nullptr
  };
  return names;
}

inline const char *EnumNameCompanionRxUnion(CompanionRxUnion e) {
  if (::flatbuffers::IsOutRange(e, CompanionRxUnion_NONE, CompanionRxUnion_Robot)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCompanionRxUnion()[index];
}

template<typename T> struct CompanionRxUnionTraits {
  static const CompanionRxUnion enum_value = CompanionRxUnion_NONE;
};

template<> struct CompanionRxUnionTraits<fbs::SetWebServerEnabled> {
  static const CompanionRxUnion enum_value = CompanionRxUnion_SetWebServerEnabled;
};

template<> struct CompanionRxUnionTraits<fbs::Robot> {
  static const CompanionRxUnion enum_value = CompanionRxUnion_Robot;
};

template<typename T> struct CompanionRxUnionUnionTraits {
  static const CompanionRxUnion enum_value = CompanionRxUnion_NONE;
};

template<> struct CompanionRxUnionUnionTraits<fbs::SetWebServerEnabledT> {
  static const CompanionRxUnion enum_value = CompanionRxUnion_SetWebServerEnabled;
};

template<> struct CompanionRxUnionUnionTraits<fbs::RobotT> {
  static const CompanionRxUnion enum_value = CompanionRxUnion_Robot;
};

struct CompanionRxUnionUnion {
  CompanionRxUnion type;
  void *value;

  CompanionRxUnionUnion() : type(CompanionRxUnion_NONE), value(nullptr) {}
  CompanionRxUnionUnion(CompanionRxUnionUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(CompanionRxUnion_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  CompanionRxUnionUnion(const CompanionRxUnionUnion &);
  CompanionRxUnionUnion &operator=(const CompanionRxUnionUnion &u)
    { CompanionRxUnionUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  CompanionRxUnionUnion &operator=(CompanionRxUnionUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~CompanionRxUnionUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = CompanionRxUnionUnionTraits<RT>::enum_value;
    if (type != CompanionRxUnion_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, CompanionRxUnion type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  fbs::SetWebServerEnabledT *AsSetWebServerEnabled() {
    return type == CompanionRxUnion_SetWebServerEnabled ?
      reinterpret_cast<fbs::SetWebServerEnabledT *>(value) : nullptr;
  }
  const fbs::SetWebServerEnabledT *AsSetWebServerEnabled() const {
    return type == CompanionRxUnion_SetWebServerEnabled ?
      reinterpret_cast<const fbs::SetWebServerEnabledT *>(value) : nullptr;
  }
  fbs::RobotT *AsRobot() {
    return type == CompanionRxUnion_Robot ?
      reinterpret_cast<fbs::RobotT *>(value) : nullptr;
  }
  const fbs::RobotT *AsRobot() const {
    return type == CompanionRxUnion_Robot ?
      reinterpret_cast<const fbs::RobotT *>(value) : nullptr;
  }
};

bool VerifyCompanionRxUnion(::flatbuffers::Verifier &verifier, const void *obj, CompanionRxUnion type);
bool VerifyCompanionRxUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct SetWebServerEnabledT : public ::flatbuffers::NativeTable {
  typedef SetWebServerEnabled TableType;
  bool enabled = false;
};

struct SetWebServerEnabled FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SetWebServerEnabledT NativeTableType;
  typedef SetWebServerEnabledBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENABLED = 4
  };
  bool enabled() const {
    return GetField<uint8_t>(VT_ENABLED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENABLED, 1) &&
           verifier.EndTable();
  }
  SetWebServerEnabledT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SetWebServerEnabledT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<SetWebServerEnabled> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const SetWebServerEnabledT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SetWebServerEnabledBuilder {
  typedef SetWebServerEnabled Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_enabled(bool enabled) {
    fbb_.AddElement<uint8_t>(SetWebServerEnabled::VT_ENABLED, static_cast<uint8_t>(enabled), 0);
  }
  explicit SetWebServerEnabledBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SetWebServerEnabled> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SetWebServerEnabled>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SetWebServerEnabled> CreateSetWebServerEnabled(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool enabled = false) {
  SetWebServerEnabledBuilder builder_(_fbb);
  builder_.add_enabled(enabled);
  return builder_.Finish();
}

::flatbuffers::Offset<SetWebServerEnabled> CreateSetWebServerEnabled(::flatbuffers::FlatBufferBuilder &_fbb, const SetWebServerEnabledT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CompanionRxT : public ::flatbuffers::NativeTable {
  typedef CompanionRx TableType;
  fbs::CompanionRxUnionUnion message{};
};

struct CompanionRx FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CompanionRxT NativeTableType;
  typedef CompanionRxBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  fbs::CompanionRxUnion message_type() const {
    return static_cast<fbs::CompanionRxUnion>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const fbs::SetWebServerEnabled *message_as_SetWebServerEnabled() const {
    return message_type() == fbs::CompanionRxUnion_SetWebServerEnabled ? static_cast<const fbs::SetWebServerEnabled *>(message()) : nullptr;
  }
  const fbs::Robot *message_as_Robot() const {
    return message_type() == fbs::CompanionRxUnion_Robot ? static_cast<const fbs::Robot *>(message()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyCompanionRxUnion(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
  CompanionRxT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CompanionRxT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<CompanionRx> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CompanionRxT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const fbs::SetWebServerEnabled *CompanionRx::message_as<fbs::SetWebServerEnabled>() const {
  return message_as_SetWebServerEnabled();
}

template<> inline const fbs::Robot *CompanionRx::message_as<fbs::Robot>() const {
  return message_as_Robot();
}

struct CompanionRxBuilder {
  typedef CompanionRx Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(fbs::CompanionRxUnion message_type) {
    fbb_.AddElement<uint8_t>(CompanionRx::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(::flatbuffers::Offset<void> message) {
    fbb_.AddOffset(CompanionRx::VT_MESSAGE, message);
  }
  explicit CompanionRxBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CompanionRx> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CompanionRx>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CompanionRx> CreateCompanionRx(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fbs::CompanionRxUnion message_type = fbs::CompanionRxUnion_NONE,
    ::flatbuffers::Offset<void> message = 0) {
  CompanionRxBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

::flatbuffers::Offset<CompanionRx> CreateCompanionRx(::flatbuffers::FlatBufferBuilder &_fbb, const CompanionRxT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SetWebServerEnabledT *SetWebServerEnabled::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SetWebServerEnabledT>(new SetWebServerEnabledT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SetWebServerEnabled::UnPackTo(SetWebServerEnabledT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = enabled(); _o->enabled = _e; }
}

inline ::flatbuffers::Offset<SetWebServerEnabled> SetWebServerEnabled::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const SetWebServerEnabledT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSetWebServerEnabled(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<SetWebServerEnabled> CreateSetWebServerEnabled(::flatbuffers::FlatBufferBuilder &_fbb, const SetWebServerEnabledT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const SetWebServerEnabledT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _enabled = _o->enabled;
  return fbs::CreateSetWebServerEnabled(
      _fbb,
      _enabled);
}

inline CompanionRxT *CompanionRx::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CompanionRxT>(new CompanionRxT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CompanionRx::UnPackTo(CompanionRxT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = message_type(); _o->message.type = _e; }
  { auto _e = message(); if (_e) _o->message.value = fbs::CompanionRxUnionUnion::UnPack(_e, message_type(), _resolver); }
}

inline ::flatbuffers::Offset<CompanionRx> CompanionRx::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CompanionRxT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCompanionRx(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<CompanionRx> CreateCompanionRx(::flatbuffers::FlatBufferBuilder &_fbb, const CompanionRxT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CompanionRxT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _message_type = _o->message.type;
  auto _message = _o->message.Pack(_fbb);
  return fbs::CreateCompanionRx(
      _fbb,
      _message_type,
      _message);
}

inline bool VerifyCompanionRxUnion(::flatbuffers::Verifier &verifier, const void *obj, CompanionRxUnion type) {
  switch (type) {
    case CompanionRxUnion_NONE: {
      return true;
    }
    case CompanionRxUnion_SetWebServerEnabled: {
      auto ptr = reinterpret_cast<const fbs::SetWebServerEnabled *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case CompanionRxUnion_Robot: {
      auto ptr = reinterpret_cast<const fbs::Robot *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyCompanionRxUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyCompanionRxUnion(
        verifier,  values->Get(i), types->GetEnum<CompanionRxUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline void *CompanionRxUnionUnion::UnPack(const void *obj, CompanionRxUnion type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case CompanionRxUnion_SetWebServerEnabled: {
      auto ptr = reinterpret_cast<const fbs::SetWebServerEnabled *>(obj);
      return ptr->UnPack(resolver);
    }
    case CompanionRxUnion_Robot: {
      auto ptr = reinterpret_cast<const fbs::Robot *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> CompanionRxUnionUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case CompanionRxUnion_SetWebServerEnabled: {
      auto ptr = reinterpret_cast<const fbs::SetWebServerEnabledT *>(value);
      return CreateSetWebServerEnabled(_fbb, ptr, _rehasher).Union();
    }
    case CompanionRxUnion_Robot: {
      auto ptr = reinterpret_cast<const fbs::RobotT *>(value);
      return CreateRobot(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline CompanionRxUnionUnion::CompanionRxUnionUnion(const CompanionRxUnionUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case CompanionRxUnion_SetWebServerEnabled: {
      value = new fbs::SetWebServerEnabledT(*reinterpret_cast<fbs::SetWebServerEnabledT *>(u.value));
      break;
    }
    case CompanionRxUnion_Robot: {
      value = new fbs::RobotT(*reinterpret_cast<fbs::RobotT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void CompanionRxUnionUnion::Reset() {
  switch (type) {
    case CompanionRxUnion_SetWebServerEnabled: {
      auto ptr = reinterpret_cast<fbs::SetWebServerEnabledT *>(value);
      delete ptr;
      break;
    }
    case CompanionRxUnion_Robot: {
      auto ptr = reinterpret_cast<fbs::RobotT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = CompanionRxUnion_NONE;
}

inline const fbs::CompanionRx *GetCompanionRx(const void *buf) {
  return ::flatbuffers::GetRoot<fbs::CompanionRx>(buf);
}

inline const fbs::CompanionRx *GetSizePrefixedCompanionRx(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fbs::CompanionRx>(buf);
}

inline const char *CompanionRxIdentifier() {
  return "CNRX";
}

inline bool CompanionRxBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CompanionRxIdentifier());
}

inline bool SizePrefixedCompanionRxBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CompanionRxIdentifier(), true);
}

inline bool VerifyCompanionRxBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::CompanionRx>(CompanionRxIdentifier());
}

inline bool VerifySizePrefixedCompanionRxBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::CompanionRx>(CompanionRxIdentifier());
}

inline void FinishCompanionRxBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::CompanionRx> root) {
  fbb.Finish(root, CompanionRxIdentifier());
}

inline void FinishSizePrefixedCompanionRxBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::CompanionRx> root) {
  fbb.FinishSizePrefixed(root, CompanionRxIdentifier());
}

inline std::unique_ptr<fbs::CompanionRxT> UnPackCompanionRx(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fbs::CompanionRxT>(GetCompanionRx(buf)->UnPack(res));
}

inline std::unique_ptr<fbs::CompanionRxT> UnPackSizePrefixedCompanionRx(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fbs::CompanionRxT>(GetSizePrefixedCompanionRx(buf)->UnPack(res));
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_COMPANIONRXMESSAGE_FBS_H_
