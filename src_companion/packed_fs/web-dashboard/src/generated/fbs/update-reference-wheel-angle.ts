// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class UpdateReferenceWheelAngle implements flatbuffers.IUnpackableObject<UpdateReferenceWheelAngleT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateReferenceWheelAngle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateReferenceWheelAngle(bb:flatbuffers.ByteBuffer, obj?:UpdateReferenceWheelAngle):UpdateReferenceWheelAngle {
  return (obj || new UpdateReferenceWheelAngle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateReferenceWheelAngle(bb:flatbuffers.ByteBuffer, obj?:UpdateReferenceWheelAngle):UpdateReferenceWheelAngle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateReferenceWheelAngle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

leftMotorFoldAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rightMotorFoldAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startUpdateReferenceWheelAngle(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLeftMotorFoldAngle(builder:flatbuffers.Builder, leftMotorFoldAngle:number) {
  builder.addFieldInt32(0, leftMotorFoldAngle, 0);
}

static addRightMotorFoldAngle(builder:flatbuffers.Builder, rightMotorFoldAngle:number) {
  builder.addFieldInt32(1, rightMotorFoldAngle, 0);
}

static endUpdateReferenceWheelAngle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateReferenceWheelAngle(builder:flatbuffers.Builder, leftMotorFoldAngle:number, rightMotorFoldAngle:number):flatbuffers.Offset {
  UpdateReferenceWheelAngle.startUpdateReferenceWheelAngle(builder);
  UpdateReferenceWheelAngle.addLeftMotorFoldAngle(builder, leftMotorFoldAngle);
  UpdateReferenceWheelAngle.addRightMotorFoldAngle(builder, rightMotorFoldAngle);
  return UpdateReferenceWheelAngle.endUpdateReferenceWheelAngle(builder);
}

unpack(): UpdateReferenceWheelAngleT {
  return new UpdateReferenceWheelAngleT(
    this.leftMotorFoldAngle(),
    this.rightMotorFoldAngle()
  );
}


unpackTo(_o: UpdateReferenceWheelAngleT): void {
  _o.leftMotorFoldAngle = this.leftMotorFoldAngle();
  _o.rightMotorFoldAngle = this.rightMotorFoldAngle();
}
}

export class UpdateReferenceWheelAngleT implements flatbuffers.IGeneratedObject {
constructor(
  public leftMotorFoldAngle: number = 0,
  public rightMotorFoldAngle: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return UpdateReferenceWheelAngle.createUpdateReferenceWheelAngle(builder,
    this.leftMotorFoldAngle,
    this.rightMotorFoldAngle
  );
}
}
