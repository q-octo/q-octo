// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class CrsfTelemetry implements flatbuffers.IUnpackableObject<CrsfTelemetryT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CrsfTelemetry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCrsfTelemetry(bb:flatbuffers.ByteBuffer, obj?:CrsfTelemetry):CrsfTelemetry {
  return (obj || new CrsfTelemetry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCrsfTelemetry(bb:flatbuffers.ByteBuffer, obj?:CrsfTelemetry):CrsfTelemetry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CrsfTelemetry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Signal strength indicator
 */
rssi():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

/**
 * Link quality
 */
linkQuality():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

/**
 * Signal to noise ratio
 */
snr():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

/**
 * Transmission power
 */
txPower():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startCrsfTelemetry(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addRssi(builder:flatbuffers.Builder, rssi:number) {
  builder.addFieldInt8(0, rssi, 0);
}

static addLinkQuality(builder:flatbuffers.Builder, linkQuality:number) {
  builder.addFieldInt8(1, linkQuality, 0);
}

static addSnr(builder:flatbuffers.Builder, snr:number) {
  builder.addFieldInt8(2, snr, 0);
}

static addTxPower(builder:flatbuffers.Builder, txPower:number) {
  builder.addFieldInt16(3, txPower, 0);
}

static endCrsfTelemetry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCrsfTelemetry(builder:flatbuffers.Builder, rssi:number, linkQuality:number, snr:number, txPower:number):flatbuffers.Offset {
  CrsfTelemetry.startCrsfTelemetry(builder);
  CrsfTelemetry.addRssi(builder, rssi);
  CrsfTelemetry.addLinkQuality(builder, linkQuality);
  CrsfTelemetry.addSnr(builder, snr);
  CrsfTelemetry.addTxPower(builder, txPower);
  return CrsfTelemetry.endCrsfTelemetry(builder);
}

unpack(): CrsfTelemetryT {
  return new CrsfTelemetryT(
    this.rssi(),
    this.linkQuality(),
    this.snr(),
    this.txPower()
  );
}


unpackTo(_o: CrsfTelemetryT): void {
  _o.rssi = this.rssi();
  _o.linkQuality = this.linkQuality();
  _o.snr = this.snr();
  _o.txPower = this.txPower();
}
}

export class CrsfTelemetryT implements flatbuffers.IGeneratedObject {
constructor(
  public rssi: number = 0,
  public linkQuality: number = 0,
  public snr: number = 0,
  public txPower: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CrsfTelemetry.createCrsfTelemetry(builder,
    this.rssi,
    this.linkQuality,
    this.snr,
    this.txPower
  );
}
}
