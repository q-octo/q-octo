// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Button } from '../fbs/button.js';


export class ButtonPressed {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ButtonPressed {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsButtonPressed(bb:flatbuffers.ByteBuffer, obj?:ButtonPressed):ButtonPressed {
  return (obj || new ButtonPressed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsButtonPressed(bb:flatbuffers.ByteBuffer, obj?:ButtonPressed):ButtonPressed {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ButtonPressed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

button():Button {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Button.A;
}

static startButtonPressed(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addButton(builder:flatbuffers.Builder, button:Button) {
  builder.addFieldInt8(0, button, Button.A);
}

static endButtonPressed(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createButtonPressed(builder:flatbuffers.Builder, button:Button):flatbuffers.Offset {
  ButtonPressed.startButtonPressed(builder);
  ButtonPressed.addButton(builder, button);
  return ButtonPressed.endButtonPressed(builder);
}
}
