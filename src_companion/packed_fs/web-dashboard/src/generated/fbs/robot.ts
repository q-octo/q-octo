// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ControlSource } from '../fbs/control-source.js';
import { DisplayMessages, DisplayMessagesT } from '../fbs/display-messages.js';
import { Motors, MotorsT } from '../fbs/motors.js';
import { Status } from '../fbs/status.js';


export class Robot implements flatbuffers.IUnpackableObject<RobotT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Robot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRobot(bb:flatbuffers.ByteBuffer, obj?:Robot):Robot {
  return (obj || new Robot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRobot(bb:flatbuffers.ByteBuffer, obj?:Robot):Robot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Robot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ROBO');
}

batteries():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 4;
}

controlSource():ControlSource {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ControlSource.RC;
}

status():Status {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Status.OK;
}

motors(obj?:Motors):Motors|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Motors()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

voltage():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

current():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

fuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rssi():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

linkQuality():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

lowVoltageThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 12.0;
}

criticalVoltageThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 16.0;
}

rssiThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

linkQualityThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

leftMotorFoldAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rightMotorFoldAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

motorErrorCode():string|null
motorErrorCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
motorErrorCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enableRover():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayMessages(obj?:DisplayMessages):DisplayMessages|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? (obj || new DisplayMessages()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startRobot(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addBatteries(builder:flatbuffers.Builder, batteries:number) {
  builder.addFieldInt32(0, batteries, 4);
}

static addControlSource(builder:flatbuffers.Builder, controlSource:ControlSource) {
  builder.addFieldInt8(1, controlSource, ControlSource.RC);
}

static addStatus(builder:flatbuffers.Builder, status:Status) {
  builder.addFieldInt8(2, status, Status.OK);
}

static addMotors(builder:flatbuffers.Builder, motorsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, motorsOffset, 0);
}

static addVoltage(builder:flatbuffers.Builder, voltage:number) {
  builder.addFieldFloat32(4, voltage, 0.0);
}

static addCurrent(builder:flatbuffers.Builder, current:number) {
  builder.addFieldFloat32(5, current, 0.0);
}

static addFuel(builder:flatbuffers.Builder, fuel:number) {
  builder.addFieldFloat32(6, fuel, 0.0);
}

static addRssi(builder:flatbuffers.Builder, rssi:number) {
  builder.addFieldFloat32(7, rssi, 0.0);
}

static addLinkQuality(builder:flatbuffers.Builder, linkQuality:number) {
  builder.addFieldInt32(8, linkQuality, 0);
}

static addMaxSpeed(builder:flatbuffers.Builder, maxSpeed:number) {
  builder.addFieldFloat32(9, maxSpeed, 0.0);
}

static addLowVoltageThreshold(builder:flatbuffers.Builder, lowVoltageThreshold:number) {
  builder.addFieldFloat32(10, lowVoltageThreshold, 12.0);
}

static addCriticalVoltageThreshold(builder:flatbuffers.Builder, criticalVoltageThreshold:number) {
  builder.addFieldFloat32(11, criticalVoltageThreshold, 16.0);
}

static addRssiThreshold(builder:flatbuffers.Builder, rssiThreshold:number) {
  builder.addFieldInt32(12, rssiThreshold, 0);
}

static addLinkQualityThreshold(builder:flatbuffers.Builder, linkQualityThreshold:number) {
  builder.addFieldInt32(13, linkQualityThreshold, 0);
}

static addLeftMotorFoldAngle(builder:flatbuffers.Builder, leftMotorFoldAngle:number) {
  builder.addFieldInt32(14, leftMotorFoldAngle, 0);
}

static addRightMotorFoldAngle(builder:flatbuffers.Builder, rightMotorFoldAngle:number) {
  builder.addFieldInt32(15, rightMotorFoldAngle, 0);
}

static addMotorErrorCode(builder:flatbuffers.Builder, motorErrorCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, motorErrorCodeOffset, 0);
}

static addEnableRover(builder:flatbuffers.Builder, enableRover:boolean) {
  builder.addFieldInt8(17, +enableRover, +false);
}

static addDisplayMessages(builder:flatbuffers.Builder, displayMessagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, displayMessagesOffset, 0);
}

static endRobot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRobotBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ROBO');
}

static finishSizePrefixedRobotBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ROBO', true);
}


unpack(): RobotT {
  return new RobotT(
    this.batteries(),
    this.controlSource(),
    this.status(),
    (this.motors() !== null ? this.motors()!.unpack() : null),
    this.voltage(),
    this.current(),
    this.fuel(),
    this.rssi(),
    this.linkQuality(),
    this.maxSpeed(),
    this.lowVoltageThreshold(),
    this.criticalVoltageThreshold(),
    this.rssiThreshold(),
    this.linkQualityThreshold(),
    this.leftMotorFoldAngle(),
    this.rightMotorFoldAngle(),
    this.motorErrorCode(),
    this.enableRover(),
    (this.displayMessages() !== null ? this.displayMessages()!.unpack() : null)
  );
}


unpackTo(_o: RobotT): void {
  _o.batteries = this.batteries();
  _o.controlSource = this.controlSource();
  _o.status = this.status();
  _o.motors = (this.motors() !== null ? this.motors()!.unpack() : null);
  _o.voltage = this.voltage();
  _o.current = this.current();
  _o.fuel = this.fuel();
  _o.rssi = this.rssi();
  _o.linkQuality = this.linkQuality();
  _o.maxSpeed = this.maxSpeed();
  _o.lowVoltageThreshold = this.lowVoltageThreshold();
  _o.criticalVoltageThreshold = this.criticalVoltageThreshold();
  _o.rssiThreshold = this.rssiThreshold();
  _o.linkQualityThreshold = this.linkQualityThreshold();
  _o.leftMotorFoldAngle = this.leftMotorFoldAngle();
  _o.rightMotorFoldAngle = this.rightMotorFoldAngle();
  _o.motorErrorCode = this.motorErrorCode();
  _o.enableRover = this.enableRover();
  _o.displayMessages = (this.displayMessages() !== null ? this.displayMessages()!.unpack() : null);
}
}

export class RobotT implements flatbuffers.IGeneratedObject {
constructor(
  public batteries: number = 4,
  public controlSource: ControlSource = ControlSource.RC,
  public status: Status = Status.OK,
  public motors: MotorsT|null = null,
  public voltage: number = 0.0,
  public current: number = 0.0,
  public fuel: number = 0.0,
  public rssi: number = 0.0,
  public linkQuality: number = 0,
  public maxSpeed: number = 0.0,
  public lowVoltageThreshold: number = 12.0,
  public criticalVoltageThreshold: number = 16.0,
  public rssiThreshold: number = 0,
  public linkQualityThreshold: number = 0,
  public leftMotorFoldAngle: number = 0,
  public rightMotorFoldAngle: number = 0,
  public motorErrorCode: string|Uint8Array|null = null,
  public enableRover: boolean = false,
  public displayMessages: DisplayMessagesT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const motors = (this.motors !== null ? this.motors!.pack(builder) : 0);
  const motorErrorCode = (this.motorErrorCode !== null ? builder.createString(this.motorErrorCode!) : 0);
  const displayMessages = (this.displayMessages !== null ? this.displayMessages!.pack(builder) : 0);

  Robot.startRobot(builder);
  Robot.addBatteries(builder, this.batteries);
  Robot.addControlSource(builder, this.controlSource);
  Robot.addStatus(builder, this.status);
  Robot.addMotors(builder, motors);
  Robot.addVoltage(builder, this.voltage);
  Robot.addCurrent(builder, this.current);
  Robot.addFuel(builder, this.fuel);
  Robot.addRssi(builder, this.rssi);
  Robot.addLinkQuality(builder, this.linkQuality);
  Robot.addMaxSpeed(builder, this.maxSpeed);
  Robot.addLowVoltageThreshold(builder, this.lowVoltageThreshold);
  Robot.addCriticalVoltageThreshold(builder, this.criticalVoltageThreshold);
  Robot.addRssiThreshold(builder, this.rssiThreshold);
  Robot.addLinkQualityThreshold(builder, this.linkQualityThreshold);
  Robot.addLeftMotorFoldAngle(builder, this.leftMotorFoldAngle);
  Robot.addRightMotorFoldAngle(builder, this.rightMotorFoldAngle);
  Robot.addMotorErrorCode(builder, motorErrorCode);
  Robot.addEnableRover(builder, this.enableRover);
  Robot.addDisplayMessages(builder, displayMessages);

  return Robot.endRobot(builder);
}
}
