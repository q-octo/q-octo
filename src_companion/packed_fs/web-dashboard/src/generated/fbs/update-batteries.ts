// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class UpdateBatteries implements flatbuffers.IUnpackableObject<UpdateBatteriesT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateBatteries {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateBatteries(bb:flatbuffers.ByteBuffer, obj?:UpdateBatteries):UpdateBatteries {
  return (obj || new UpdateBatteries()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateBatteries(bb:flatbuffers.ByteBuffer, obj?:UpdateBatteries):UpdateBatteries {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateBatteries()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

batteries():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startUpdateBatteries(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addBatteries(builder:flatbuffers.Builder, batteries:number) {
  builder.addFieldInt32(0, batteries, 0);
}

static endUpdateBatteries(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateBatteries(builder:flatbuffers.Builder, batteries:number):flatbuffers.Offset {
  UpdateBatteries.startUpdateBatteries(builder);
  UpdateBatteries.addBatteries(builder, batteries);
  return UpdateBatteries.endUpdateBatteries(builder);
}

unpack(): UpdateBatteriesT {
  return new UpdateBatteriesT(
    this.batteries()
  );
}


unpackTo(_o: UpdateBatteriesT): void {
  _o.batteries = this.batteries();
}
}

export class UpdateBatteriesT implements flatbuffers.IGeneratedObject {
constructor(
  public batteries: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return UpdateBatteries.createUpdateBatteries(builder,
    this.batteries
  );
}
}
