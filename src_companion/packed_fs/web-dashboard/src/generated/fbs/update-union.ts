// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { UpdateBatteries, UpdateBatteriesT } from '../fbs/update-batteries.js';
import { UpdateCriticalVoltageThreshold, UpdateCriticalVoltageThresholdT } from '../fbs/update-critical-voltage-threshold.js';
import { UpdateEnableRover, UpdateEnableRoverT } from '../fbs/update-enable-rover.js';
import { UpdateFoldWheels, UpdateFoldWheelsT } from '../fbs/update-fold-wheels.js';
import { UpdateLinkQualityThreshold, UpdateLinkQualityThresholdT } from '../fbs/update-link-quality-threshold.js';
import { UpdateLowVoltageThreshold, UpdateLowVoltageThresholdT } from '../fbs/update-low-voltage-threshold.js';
import { UpdateReferenceWheelAngle, UpdateReferenceWheelAngleT } from '../fbs/update-reference-wheel-angle.js';
import { UpdateRssiThreshold, UpdateRssiThresholdT } from '../fbs/update-rssi-threshold.js';


export enum UpdateUnion {
  NONE = 0,
  UpdateBatteries = 1,
  UpdateLowVoltageThreshold = 2,
  UpdateCriticalVoltageThreshold = 3,
  UpdateReferenceWheelAngle = 4,
  UpdateFoldWheels = 5,
  UpdateEnableRover = 6,
  UpdateLinkQualityThreshold = 7,
  UpdateRssiThreshold = 8
}

export function unionToUpdateUnion(
  type: UpdateUnion,
  accessor: (obj:UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateFoldWheels|UpdateLinkQualityThreshold|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateRssiThreshold) => UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateFoldWheels|UpdateLinkQualityThreshold|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateRssiThreshold|null
): UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateFoldWheels|UpdateLinkQualityThreshold|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateRssiThreshold|null {
  switch(UpdateUnion[type]) {
    case 'NONE': return null; 
    case 'UpdateBatteries': return accessor(new UpdateBatteries())! as UpdateBatteries;
    case 'UpdateLowVoltageThreshold': return accessor(new UpdateLowVoltageThreshold())! as UpdateLowVoltageThreshold;
    case 'UpdateCriticalVoltageThreshold': return accessor(new UpdateCriticalVoltageThreshold())! as UpdateCriticalVoltageThreshold;
    case 'UpdateReferenceWheelAngle': return accessor(new UpdateReferenceWheelAngle())! as UpdateReferenceWheelAngle;
    case 'UpdateFoldWheels': return accessor(new UpdateFoldWheels())! as UpdateFoldWheels;
    case 'UpdateEnableRover': return accessor(new UpdateEnableRover())! as UpdateEnableRover;
    case 'UpdateLinkQualityThreshold': return accessor(new UpdateLinkQualityThreshold())! as UpdateLinkQualityThreshold;
    case 'UpdateRssiThreshold': return accessor(new UpdateRssiThreshold())! as UpdateRssiThreshold;
    default: return null;
  }
}

export function unionListToUpdateUnion(
  type: UpdateUnion, 
  accessor: (index: number, obj:UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateFoldWheels|UpdateLinkQualityThreshold|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateRssiThreshold) => UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateFoldWheels|UpdateLinkQualityThreshold|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateRssiThreshold|null, 
  index: number
): UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateFoldWheels|UpdateLinkQualityThreshold|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateRssiThreshold|null {
  switch(UpdateUnion[type]) {
    case 'NONE': return null; 
    case 'UpdateBatteries': return accessor(index, new UpdateBatteries())! as UpdateBatteries;
    case 'UpdateLowVoltageThreshold': return accessor(index, new UpdateLowVoltageThreshold())! as UpdateLowVoltageThreshold;
    case 'UpdateCriticalVoltageThreshold': return accessor(index, new UpdateCriticalVoltageThreshold())! as UpdateCriticalVoltageThreshold;
    case 'UpdateReferenceWheelAngle': return accessor(index, new UpdateReferenceWheelAngle())! as UpdateReferenceWheelAngle;
    case 'UpdateFoldWheels': return accessor(index, new UpdateFoldWheels())! as UpdateFoldWheels;
    case 'UpdateEnableRover': return accessor(index, new UpdateEnableRover())! as UpdateEnableRover;
    case 'UpdateLinkQualityThreshold': return accessor(index, new UpdateLinkQualityThreshold())! as UpdateLinkQualityThreshold;
    case 'UpdateRssiThreshold': return accessor(index, new UpdateRssiThreshold())! as UpdateRssiThreshold;
    default: return null;
  }
}
