// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ButtonPressed, ButtonPressedT } from '../fbs/button-pressed.js';
import { CompanionTxUnion, unionToCompanionTxUnion, unionListToCompanionTxUnion } from '../fbs/companion-tx-union.js';


export class CompanionTx implements flatbuffers.IUnpackableObject<CompanionTxT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CompanionTx {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCompanionTx(bb:flatbuffers.ByteBuffer, obj?:CompanionTx):CompanionTx {
  return (obj || new CompanionTx()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCompanionTx(bb:flatbuffers.ByteBuffer, obj?:CompanionTx):CompanionTx {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CompanionTx()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('CNTX');
}

messageType():CompanionTxUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : CompanionTxUnion.NONE;
}

message<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startCompanionTx(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMessageType(builder:flatbuffers.Builder, messageType:CompanionTxUnion) {
  builder.addFieldInt8(0, messageType, CompanionTxUnion.NONE);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static endCompanionTx(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCompanionTxBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CNTX');
}

static finishSizePrefixedCompanionTxBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CNTX', true);
}

static createCompanionTx(builder:flatbuffers.Builder, messageType:CompanionTxUnion, messageOffset:flatbuffers.Offset):flatbuffers.Offset {
  CompanionTx.startCompanionTx(builder);
  CompanionTx.addMessageType(builder, messageType);
  CompanionTx.addMessage(builder, messageOffset);
  return CompanionTx.endCompanionTx(builder);
}

unpack(): CompanionTxT {
  return new CompanionTxT(
    this.messageType(),
    (() => {
      const temp = unionToCompanionTxUnion(this.messageType(), this.message.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: CompanionTxT): void {
  _o.messageType = this.messageType();
  _o.message = (() => {
      const temp = unionToCompanionTxUnion(this.messageType(), this.message.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class CompanionTxT implements flatbuffers.IGeneratedObject {
constructor(
  public messageType: CompanionTxUnion = CompanionTxUnion.NONE,
  public message: ButtonPressedT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const message = builder.createObjectOffset(this.message);

  return CompanionTx.createCompanionTx(builder,
    this.messageType,
    message
  );
}
}
