// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class UpdateMaxSpeed implements flatbuffers.IUnpackableObject<UpdateMaxSpeedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateMaxSpeed {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateMaxSpeed(bb:flatbuffers.ByteBuffer, obj?:UpdateMaxSpeed):UpdateMaxSpeed {
  return (obj || new UpdateMaxSpeed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateMaxSpeed(bb:flatbuffers.ByteBuffer, obj?:UpdateMaxSpeed):UpdateMaxSpeed {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateMaxSpeed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startUpdateMaxSpeed(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMaxSpeed(builder:flatbuffers.Builder, maxSpeed:number) {
  builder.addFieldFloat32(0, maxSpeed, 0.0);
}

static endUpdateMaxSpeed(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateMaxSpeed(builder:flatbuffers.Builder, maxSpeed:number):flatbuffers.Offset {
  UpdateMaxSpeed.startUpdateMaxSpeed(builder);
  UpdateMaxSpeed.addMaxSpeed(builder, maxSpeed);
  return UpdateMaxSpeed.endUpdateMaxSpeed(builder);
}

unpack(): UpdateMaxSpeedT {
  return new UpdateMaxSpeedT(
    this.maxSpeed()
  );
}


unpackTo(_o: UpdateMaxSpeedT): void {
  _o.maxSpeed = this.maxSpeed();
}
}

export class UpdateMaxSpeedT implements flatbuffers.IGeneratedObject {
constructor(
  public maxSpeed: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return UpdateMaxSpeed.createUpdateMaxSpeed(builder,
    this.maxSpeed
  );
}
}
