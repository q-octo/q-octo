// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class CrsfChannels implements flatbuffers.IUnpackableObject<CrsfChannelsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CrsfChannels {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

data(index: number):number|null {
    return this.bb!.readUint16(this.bb_pos + 0 + index * 2);
}

static sizeOf():number {
  return 32;
}

static createCrsfChannels(builder:flatbuffers.Builder, data: number[]|null):flatbuffers.Offset {
  builder.prep(2, 32);

  for (let i = 15; i >= 0; --i) {
    builder.writeInt16((data?.[i] ?? 0));

  }

  return builder.offset();
}


unpack(): CrsfChannelsT {
  return new CrsfChannelsT(
    this.bb!.createScalarList<number>(this.data.bind(this), 16)
  );
}


unpackTo(_o: CrsfChannelsT): void {
  _o.data = this.bb!.createScalarList<number>(this.data.bind(this), 16);
}
}

export class CrsfChannelsT implements flatbuffers.IGeneratedObject {
constructor(
  public data: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CrsfChannels.createCrsfChannels(builder,
    this.data
  );
}
}
