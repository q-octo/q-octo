// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class TankDriveConfig implements flatbuffers.IUnpackableObject<TankDriveConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TankDriveConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTankDriveConfig(bb:flatbuffers.ByteBuffer, obj?:TankDriveConfig):TankDriveConfig {
  return (obj || new TankDriveConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTankDriveConfig(bb:flatbuffers.ByteBuffer, obj?:TankDriveConfig):TankDriveConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TankDriveConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

leftRadS():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rightRadS():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startTankDriveConfig(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLeftRadS(builder:flatbuffers.Builder, leftRadS:number) {
  builder.addFieldFloat32(0, leftRadS, 0.0);
}

static addRightRadS(builder:flatbuffers.Builder, rightRadS:number) {
  builder.addFieldFloat32(1, rightRadS, 0.0);
}

static endTankDriveConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTankDriveConfig(builder:flatbuffers.Builder, leftRadS:number, rightRadS:number):flatbuffers.Offset {
  TankDriveConfig.startTankDriveConfig(builder);
  TankDriveConfig.addLeftRadS(builder, leftRadS);
  TankDriveConfig.addRightRadS(builder, rightRadS);
  return TankDriveConfig.endTankDriveConfig(builder);
}

unpack(): TankDriveConfigT {
  return new TankDriveConfigT(
    this.leftRadS(),
    this.rightRadS()
  );
}


unpackTo(_o: TankDriveConfigT): void {
  _o.leftRadS = this.leftRadS();
  _o.rightRadS = this.rightRadS();
}
}

export class TankDriveConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public leftRadS: number = 0.0,
  public rightRadS: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TankDriveConfig.createTankDriveConfig(builder,
    this.leftRadS,
    this.rightRadS
  );
}
}
