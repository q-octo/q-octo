// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Channels } from '../fbs/channels.js';
import { Telemetry } from '../fbs/telemetry.js';


export class TxData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TxData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTxData(bb:flatbuffers.ByteBuffer, obj?:TxData):TxData {
  return (obj || new TxData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTxData(bb:flatbuffers.ByteBuffer, obj?:TxData):TxData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TxData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('OCDT');
}

channels(obj?:Channels):Channels|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Channels()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * Telemetry data associated with the RC frame
 */
telemetry(obj?:Telemetry):Telemetry|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Telemetry()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Failsafe flag with a default value of true
 */
failsafe():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

static startTxData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addChannels(builder:flatbuffers.Builder, channelsOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, channelsOffset, 0);
}

static addTelemetry(builder:flatbuffers.Builder, telemetryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, telemetryOffset, 0);
}

static addFailsafe(builder:flatbuffers.Builder, failsafe:boolean) {
  builder.addFieldInt8(2, +failsafe, +true);
}

static endTxData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTxDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'OCDT');
}

static finishSizePrefixedTxDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'OCDT', true);
}

}
