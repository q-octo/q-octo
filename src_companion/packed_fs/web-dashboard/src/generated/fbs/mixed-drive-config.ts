// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class MixedDriveConfig implements flatbuffers.IUnpackableObject<MixedDriveConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MixedDriveConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMixedDriveConfig(bb:flatbuffers.ByteBuffer, obj?:MixedDriveConfig):MixedDriveConfig {
  return (obj || new MixedDriveConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMixedDriveConfig(bb:flatbuffers.ByteBuffer, obj?:MixedDriveConfig):MixedDriveConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MixedDriveConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

radS():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

direction():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startMixedDriveConfig(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRadS(builder:flatbuffers.Builder, radS:number) {
  builder.addFieldFloat32(0, radS, 0.0);
}

static addDirection(builder:flatbuffers.Builder, direction:number) {
  builder.addFieldFloat32(1, direction, 0.0);
}

static endMixedDriveConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMixedDriveConfig(builder:flatbuffers.Builder, radS:number, direction:number):flatbuffers.Offset {
  MixedDriveConfig.startMixedDriveConfig(builder);
  MixedDriveConfig.addRadS(builder, radS);
  MixedDriveConfig.addDirection(builder, direction);
  return MixedDriveConfig.endMixedDriveConfig(builder);
}

unpack(): MixedDriveConfigT {
  return new MixedDriveConfigT(
    this.radS(),
    this.direction()
  );
}


unpackTo(_o: MixedDriveConfigT): void {
  _o.radS = this.radS();
  _o.direction = this.direction();
}
}

export class MixedDriveConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public radS: number = 0.0,
  public direction: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return MixedDriveConfig.createMixedDriveConfig(builder,
    this.radS,
    this.direction
  );
}
}
