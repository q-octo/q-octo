// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class UpdateMotorKp implements flatbuffers.IUnpackableObject<UpdateMotorKpT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateMotorKp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateMotorKp(bb:flatbuffers.ByteBuffer, obj?:UpdateMotorKp):UpdateMotorKp {
  return (obj || new UpdateMotorKp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateMotorKp(bb:flatbuffers.ByteBuffer, obj?:UpdateMotorKp):UpdateMotorKp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateMotorKp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

motorKp():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startUpdateMotorKp(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMotorKp(builder:flatbuffers.Builder, motorKp:number) {
  builder.addFieldFloat32(0, motorKp, 0.0);
}

static endUpdateMotorKp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateMotorKp(builder:flatbuffers.Builder, motorKp:number):flatbuffers.Offset {
  UpdateMotorKp.startUpdateMotorKp(builder);
  UpdateMotorKp.addMotorKp(builder, motorKp);
  return UpdateMotorKp.endUpdateMotorKp(builder);
}

unpack(): UpdateMotorKpT {
  return new UpdateMotorKpT(
    this.motorKp()
  );
}


unpackTo(_o: UpdateMotorKpT): void {
  _o.motorKp = this.motorKp();
}
}

export class UpdateMotorKpT implements flatbuffers.IGeneratedObject {
constructor(
  public motorKp: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return UpdateMotorKp.createUpdateMotorKp(builder,
    this.motorKp
  );
}
}
