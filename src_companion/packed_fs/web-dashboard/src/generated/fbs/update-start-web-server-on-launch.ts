// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class UpdateStartWebServerOnLaunch implements flatbuffers.IUnpackableObject<UpdateStartWebServerOnLaunchT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateStartWebServerOnLaunch {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateStartWebServerOnLaunch(bb:flatbuffers.ByteBuffer, obj?:UpdateStartWebServerOnLaunch):UpdateStartWebServerOnLaunch {
  return (obj || new UpdateStartWebServerOnLaunch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateStartWebServerOnLaunch(bb:flatbuffers.ByteBuffer, obj?:UpdateStartWebServerOnLaunch):UpdateStartWebServerOnLaunch {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateStartWebServerOnLaunch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

startWebServerOnLaunch():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startUpdateStartWebServerOnLaunch(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addStartWebServerOnLaunch(builder:flatbuffers.Builder, startWebServerOnLaunch:boolean) {
  builder.addFieldInt8(0, +startWebServerOnLaunch, +false);
}

static endUpdateStartWebServerOnLaunch(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdateStartWebServerOnLaunch(builder:flatbuffers.Builder, startWebServerOnLaunch:boolean):flatbuffers.Offset {
  UpdateStartWebServerOnLaunch.startUpdateStartWebServerOnLaunch(builder);
  UpdateStartWebServerOnLaunch.addStartWebServerOnLaunch(builder, startWebServerOnLaunch);
  return UpdateStartWebServerOnLaunch.endUpdateStartWebServerOnLaunch(builder);
}

unpack(): UpdateStartWebServerOnLaunchT {
  return new UpdateStartWebServerOnLaunchT(
    this.startWebServerOnLaunch()
  );
}


unpackTo(_o: UpdateStartWebServerOnLaunchT): void {
  _o.startWebServerOnLaunch = this.startWebServerOnLaunch();
}
}

export class UpdateStartWebServerOnLaunchT implements flatbuffers.IGeneratedObject {
constructor(
  public startWebServerOnLaunch: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return UpdateStartWebServerOnLaunch.createUpdateStartWebServerOnLaunch(builder,
    this.startWebServerOnLaunch
  );
}
}
