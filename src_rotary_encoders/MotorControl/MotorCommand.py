# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MotorControl

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MotorCommand(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MotorCommand()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMotorCommand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MotorCommand
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MotorCommand
    def MotorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MotorCommand
    def CommandType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # MotorCommand
    def Command(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def MotorCommandStart(builder):
    builder.StartObject(3)

def Start(builder):
    MotorCommandStart(builder)

def MotorCommandAddMotorId(builder, motorId):
    builder.PrependInt8Slot(0, motorId, 0)

def AddMotorId(builder, motorId):
    MotorCommandAddMotorId(builder, motorId)

def MotorCommandAddCommandType(builder, commandType):
    builder.PrependUint8Slot(1, commandType, 0)

def AddCommandType(builder, commandType):
    MotorCommandAddCommandType(builder, commandType)

def MotorCommandAddCommand(builder, command):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(command), 0)

def AddCommand(builder, command):
    MotorCommandAddCommand(builder, command)

def MotorCommandEnd(builder):
    return builder.EndObject()

def End(builder):
    return MotorCommandEnd(builder)

import MotorControl.EnableMotor
import MotorControl.InitMotor
import MotorControl.MotorCommands
import MotorControl.SendMotionControl
import MotorControl.SetCurrentFilterGain
import MotorControl.SetCurrentKi
import MotorControl.SetCurrentKp
import MotorControl.SetCurrentRef
import MotorControl.SetLimitCurrent
import MotorControl.SetLimitSpeed
import MotorControl.SetLimitTorque
import MotorControl.SetPositionKp
import MotorControl.SetPositionRef
import MotorControl.SetRunMode
import MotorControl.SetSpeedKi
import MotorControl.SetSpeedKp
import MotorControl.SetSpeedRef
import MotorControl.StopMotor
try:
    from typing import Union
except:
    pass

class MotorCommandT(object):

    # MotorCommandT
    def __init__(self):
        self.motorId = 0  # type: int
        self.commandType = 0  # type: int
        self.command = None  # type: Union[None, MotorControl.InitMotor.InitMotorT, MotorControl.EnableMotor.EnableMotorT, MotorControl.StopMotor.StopMotorT, MotorControl.SetRunMode.SetRunModeT, MotorControl.SendMotionControl.SendMotionControlT, MotorControl.SetLimitSpeed.SetLimitSpeedT, MotorControl.SetLimitCurrent.SetLimitCurrentT, MotorControl.SetLimitTorque.SetLimitTorqueT, MotorControl.SetCurrentKp.SetCurrentKpT, MotorControl.SetCurrentKi.SetCurrentKiT, MotorControl.SetCurrentFilterGain.SetCurrentFilterGainT, MotorControl.SetCurrentRef.SetCurrentRefT, MotorControl.SetPositionKp.SetPositionKpT, MotorControl.SetPositionRef.SetPositionRefT, MotorControl.SetSpeedKp.SetSpeedKpT, MotorControl.SetSpeedKi.SetSpeedKiT, MotorControl.SetSpeedRef.SetSpeedRefT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        motorCommand = MotorCommand()
        motorCommand.Init(buf, pos)
        return cls.InitFromObj(motorCommand)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, motorCommand):
        x = MotorCommandT()
        x._UnPack(motorCommand)
        return x

    # MotorCommandT
    def _UnPack(self, motorCommand):
        if motorCommand is None:
            return
        self.motorId = motorCommand.MotorId()
        self.commandType = motorCommand.CommandType()
        self.command = MotorControl.MotorCommands.MotorCommandsCreator(self.commandType, motorCommand.Command())

    # MotorCommandT
    def Pack(self, builder):
        if self.command is not None:
            command = self.command.Pack(builder)
        MotorCommandStart(builder)
        MotorCommandAddMotorId(builder, self.motorId)
        MotorCommandAddCommandType(builder, self.commandType)
        if self.command is not None:
            MotorCommandAddCommand(builder, command)
        motorCommand = MotorCommandEnd(builder)
        return motorCommand
