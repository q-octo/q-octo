# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MotorControl

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SpeedTorqueControlMode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpeedTorqueControlMode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpeedTorqueControlMode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SpeedTorqueControlMode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def SpeedTorqueControlModeStart(builder):
    builder.StartObject(0)

def Start(builder):
    SpeedTorqueControlModeStart(builder)

def SpeedTorqueControlModeEnd(builder):
    return builder.EndObject()

def End(builder):
    return SpeedTorqueControlModeEnd(builder)


class SpeedTorqueControlModeT(object):

    # SpeedTorqueControlModeT
    def __init__(self):
        pass

    @classmethod
    def InitFromBuf(cls, buf, pos):
        speedTorqueControlMode = SpeedTorqueControlMode()
        speedTorqueControlMode.Init(buf, pos)
        return cls.InitFromObj(speedTorqueControlMode)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, speedTorqueControlMode):
        x = SpeedTorqueControlModeT()
        x._UnPack(speedTorqueControlMode)
        return x

    # SpeedTorqueControlModeT
    def _UnPack(self, speedTorqueControlMode):
        if speedTorqueControlMode is None:
            return

    # SpeedTorqueControlModeT
    def Pack(self, builder):
        SpeedTorqueControlModeStart(builder)
        speedTorqueControlMode = SpeedTorqueControlModeEnd(builder)
        return speedTorqueControlMode
