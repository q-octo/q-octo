# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MotorControl

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EncoderCommand(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EncoderCommand()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEncoderCommand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EncoderCommand
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EncoderCommand
    def MotorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # EncoderCommand
    def CommandType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # EncoderCommand
    def Command(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def EncoderCommandStart(builder):
    builder.StartObject(3)

def Start(builder):
    EncoderCommandStart(builder)

def EncoderCommandAddMotorId(builder, motorId):
    builder.PrependInt8Slot(0, motorId, 0)

def AddMotorId(builder, motorId):
    EncoderCommandAddMotorId(builder, motorId)

def EncoderCommandAddCommandType(builder, commandType):
    builder.PrependUint8Slot(1, commandType, 0)

def AddCommandType(builder, commandType):
    EncoderCommandAddCommandType(builder, commandType)

def EncoderCommandAddCommand(builder, command):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(command), 0)

def AddCommand(builder, command):
    EncoderCommandAddCommand(builder, command)

def EncoderCommandEnd(builder):
    return builder.EndObject()

def End(builder):
    return EncoderCommandEnd(builder)

import MotorControl.EnableExtendedMode
import MotorControl.EncoderCommands
import MotorControl.MoveMotor
import MotorControl.PositionSpeedTorqueMode
import MotorControl.SetMotorPositionToZero
import MotorControl.SpeedTorqueControlMode
import MotorControl.StartMotor
import MotorControl.StopMotor
import MotorControl.TorqueControlMode
try:
    from typing import Union
except:
    pass

class EncoderCommandT(object):

    # EncoderCommandT
    def __init__(self):
        self.motorId = 0  # type: int
        self.commandType = 0  # type: int
        self.command = None  # type: Union[None, MotorControl.EnableExtendedMode.EnableExtendedModeT, MotorControl.StartMotor.StartMotorT, MotorControl.StopMotor.StopMotorT, MotorControl.TorqueControlMode.TorqueControlModeT, MotorControl.SpeedTorqueControlMode.SpeedTorqueControlModeT, MotorControl.PositionSpeedTorqueMode.PositionSpeedTorqueModeT, MotorControl.SetMotorPositionToZero.SetMotorPositionToZeroT, MotorControl.MoveMotor.MoveMotorT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        encoderCommand = EncoderCommand()
        encoderCommand.Init(buf, pos)
        return cls.InitFromObj(encoderCommand)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, encoderCommand):
        x = EncoderCommandT()
        x._UnPack(encoderCommand)
        return x

    # EncoderCommandT
    def _UnPack(self, encoderCommand):
        if encoderCommand is None:
            return
        self.motorId = encoderCommand.MotorId()
        self.commandType = encoderCommand.CommandType()
        self.command = MotorControl.EncoderCommands.EncoderCommandsCreator(self.commandType, encoderCommand.Command())

    # EncoderCommandT
    def Pack(self, builder):
        if self.command is not None:
            command = self.command.Pack(builder)
        EncoderCommandStart(builder)
        EncoderCommandAddMotorId(builder, self.motorId)
        EncoderCommandAddCommandType(builder, self.commandType)
        if self.command is not None:
            EncoderCommandAddCommand(builder, command)
        encoderCommand = EncoderCommandEnd(builder)
        return encoderCommand
