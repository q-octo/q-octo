# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MotorControl

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SetLimitTorque(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SetLimitTorque()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSetLimitTorque(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SetLimitTorque
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SetLimitTorque
    def Torque(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def SetLimitTorqueStart(builder):
    builder.StartObject(1)

def Start(builder):
    SetLimitTorqueStart(builder)

def SetLimitTorqueAddTorque(builder, torque):
    builder.PrependFloat32Slot(0, torque, 0.0)

def AddTorque(builder, torque):
    SetLimitTorqueAddTorque(builder, torque)

def SetLimitTorqueEnd(builder):
    return builder.EndObject()

def End(builder):
    return SetLimitTorqueEnd(builder)


class SetLimitTorqueT(object):

    # SetLimitTorqueT
    def __init__(self):
        self.torque = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        setLimitTorque = SetLimitTorque()
        setLimitTorque.Init(buf, pos)
        return cls.InitFromObj(setLimitTorque)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, setLimitTorque):
        x = SetLimitTorqueT()
        x._UnPack(setLimitTorque)
        return x

    # SetLimitTorqueT
    def _UnPack(self, setLimitTorque):
        if setLimitTorque is None:
            return
        self.torque = setLimitTorque.Torque()

    # SetLimitTorqueT
    def Pack(self, builder):
        SetLimitTorqueStart(builder)
        SetLimitTorqueAddTorque(builder, self.torque)
        setLimitTorque = SetLimitTorqueEnd(builder)
        return setLimitTorque
