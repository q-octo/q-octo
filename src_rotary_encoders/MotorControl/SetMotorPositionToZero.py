# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MotorControl

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SetMotorPositionToZero(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SetMotorPositionToZero()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSetMotorPositionToZero(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SetMotorPositionToZero
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def SetMotorPositionToZeroStart(builder):
    builder.StartObject(0)

def Start(builder):
    SetMotorPositionToZeroStart(builder)

def SetMotorPositionToZeroEnd(builder):
    return builder.EndObject()

def End(builder):
    return SetMotorPositionToZeroEnd(builder)


class SetMotorPositionToZeroT(object):

    # SetMotorPositionToZeroT
    def __init__(self):
        pass

    @classmethod
    def InitFromBuf(cls, buf, pos):
        setMotorPositionToZero = SetMotorPositionToZero()
        setMotorPositionToZero.Init(buf, pos)
        return cls.InitFromObj(setMotorPositionToZero)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, setMotorPositionToZero):
        x = SetMotorPositionToZeroT()
        x._UnPack(setMotorPositionToZero)
        return x

    # SetMotorPositionToZeroT
    def _UnPack(self, setMotorPositionToZero):
        if setMotorPositionToZero is None:
            return

    # SetMotorPositionToZeroT
    def Pack(self, builder):
        SetMotorPositionToZeroStart(builder)
        setMotorPositionToZero = SetMotorPositionToZeroEnd(builder)
        return setMotorPositionToZero
