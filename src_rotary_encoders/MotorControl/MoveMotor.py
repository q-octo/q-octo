# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MotorControl

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MoveMotor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MoveMotor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMoveMotor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MoveMotor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MoveMotor
    def PositionDegrees(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # MoveMotor
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # MoveMotor
    def PositionGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # MoveMotor
    def PositionDamping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # MoveMotor
    def Torque(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def MoveMotorStart(builder):
    builder.StartObject(5)

def Start(builder):
    MoveMotorStart(builder)

def MoveMotorAddPositionDegrees(builder, positionDegrees):
    builder.PrependInt16Slot(0, positionDegrees, 0)

def AddPositionDegrees(builder, positionDegrees):
    MoveMotorAddPositionDegrees(builder, positionDegrees)

def MoveMotorAddSpeed(builder, speed):
    builder.PrependInt16Slot(1, speed, 0)

def AddSpeed(builder, speed):
    MoveMotorAddSpeed(builder, speed)

def MoveMotorAddPositionGain(builder, positionGain):
    builder.PrependUint16Slot(2, positionGain, 0)

def AddPositionGain(builder, positionGain):
    MoveMotorAddPositionGain(builder, positionGain)

def MoveMotorAddPositionDamping(builder, positionDamping):
    builder.PrependUint16Slot(3, positionDamping, 0)

def AddPositionDamping(builder, positionDamping):
    MoveMotorAddPositionDamping(builder, positionDamping)

def MoveMotorAddTorque(builder, torque):
    builder.PrependUint16Slot(4, torque, 0)

def AddTorque(builder, torque):
    MoveMotorAddTorque(builder, torque)

def MoveMotorEnd(builder):
    return builder.EndObject()

def End(builder):
    return MoveMotorEnd(builder)


class MoveMotorT(object):

    # MoveMotorT
    def __init__(self):
        self.positionDegrees = 0  # type: int
        self.speed = 0  # type: int
        self.positionGain = 0  # type: int
        self.positionDamping = 0  # type: int
        self.torque = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        moveMotor = MoveMotor()
        moveMotor.Init(buf, pos)
        return cls.InitFromObj(moveMotor)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, moveMotor):
        x = MoveMotorT()
        x._UnPack(moveMotor)
        return x

    # MoveMotorT
    def _UnPack(self, moveMotor):
        if moveMotor is None:
            return
        self.positionDegrees = moveMotor.PositionDegrees()
        self.speed = moveMotor.Speed()
        self.positionGain = moveMotor.PositionGain()
        self.positionDamping = moveMotor.PositionDamping()
        self.torque = moveMotor.Torque()

    # MoveMotorT
    def Pack(self, builder):
        MoveMotorStart(builder)
        MoveMotorAddPositionDegrees(builder, self.positionDegrees)
        MoveMotorAddSpeed(builder, self.speed)
        MoveMotorAddPositionGain(builder, self.positionGain)
        MoveMotorAddPositionDamping(builder, self.positionDamping)
        MoveMotorAddTorque(builder, self.torque)
        moveMotor = MoveMotorEnd(builder)
        return moveMotor
