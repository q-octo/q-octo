# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MotorControl

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SendMotionControl(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SendMotionControl()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSendMotionControl(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SendMotionControl
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SendMotionControl
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SendMotionControl
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SendMotionControl
    def Torque(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SendMotionControl
    def Kp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SendMotionControl
    def Kd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def SendMotionControlStart(builder):
    builder.StartObject(5)

def Start(builder):
    SendMotionControlStart(builder)

def SendMotionControlAddPosition(builder, position):
    builder.PrependFloat32Slot(0, position, 0.0)

def AddPosition(builder, position):
    SendMotionControlAddPosition(builder, position)

def SendMotionControlAddSpeed(builder, speed):
    builder.PrependFloat32Slot(1, speed, 0.0)

def AddSpeed(builder, speed):
    SendMotionControlAddSpeed(builder, speed)

def SendMotionControlAddTorque(builder, torque):
    builder.PrependFloat32Slot(2, torque, 0.0)

def AddTorque(builder, torque):
    SendMotionControlAddTorque(builder, torque)

def SendMotionControlAddKp(builder, kp):
    builder.PrependFloat32Slot(3, kp, 0.0)

def AddKp(builder, kp):
    SendMotionControlAddKp(builder, kp)

def SendMotionControlAddKd(builder, kd):
    builder.PrependFloat32Slot(4, kd, 0.0)

def AddKd(builder, kd):
    SendMotionControlAddKd(builder, kd)

def SendMotionControlEnd(builder):
    return builder.EndObject()

def End(builder):
    return SendMotionControlEnd(builder)


class SendMotionControlT(object):

    # SendMotionControlT
    def __init__(self):
        self.position = 0.0  # type: float
        self.speed = 0.0  # type: float
        self.torque = 0.0  # type: float
        self.kp = 0.0  # type: float
        self.kd = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sendMotionControl = SendMotionControl()
        sendMotionControl.Init(buf, pos)
        return cls.InitFromObj(sendMotionControl)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sendMotionControl):
        x = SendMotionControlT()
        x._UnPack(sendMotionControl)
        return x

    # SendMotionControlT
    def _UnPack(self, sendMotionControl):
        if sendMotionControl is None:
            return
        self.position = sendMotionControl.Position()
        self.speed = sendMotionControl.Speed()
        self.torque = sendMotionControl.Torque()
        self.kp = sendMotionControl.Kp()
        self.kd = sendMotionControl.Kd()

    # SendMotionControlT
    def Pack(self, builder):
        SendMotionControlStart(builder)
        SendMotionControlAddPosition(builder, self.position)
        SendMotionControlAddSpeed(builder, self.speed)
        SendMotionControlAddTorque(builder, self.torque)
        SendMotionControlAddKp(builder, self.kp)
        SendMotionControlAddKd(builder, self.kd)
        sendMotionControl = SendMotionControlEnd(builder)
        return sendMotionControl
