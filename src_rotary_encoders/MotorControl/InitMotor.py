# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MotorControl

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InitMotor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InitMotor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInitMotor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InitMotor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InitMotor
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def InitMotorStart(builder):
    builder.StartObject(1)

def Start(builder):
    InitMotorStart(builder)

def InitMotorAddMode(builder, mode):
    builder.PrependInt8Slot(0, mode, 0)

def AddMode(builder, mode):
    InitMotorAddMode(builder, mode)

def InitMotorEnd(builder):
    return builder.EndObject()

def End(builder):
    return InitMotorEnd(builder)


class InitMotorT(object):

    # InitMotorT
    def __init__(self):
        self.mode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        initMotor = InitMotor()
        initMotor.Init(buf, pos)
        return cls.InitFromObj(initMotor)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, initMotor):
        x = InitMotorT()
        x._UnPack(initMotor)
        return x

    # InitMotorT
    def _UnPack(self, initMotor):
        if initMotor is None:
            return
        self.mode = initMotor.Mode()

    # InitMotorT
    def Pack(self, builder):
        InitMotorStart(builder)
        InitMotorAddMode(builder, self.mode)
        initMotor = InitMotorEnd(builder)
        return initMotor
