# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MotorControl

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Command(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Command()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCommand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Command
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Command
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Command
    def MotorControl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MotorControl.MotorCommand import MotorCommand
            obj = MotorCommand()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Command
    def EncoderControl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MotorControl.EncoderCommand import EncoderCommand
            obj = EncoderCommand()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CommandStart(builder):
    builder.StartObject(3)

def Start(builder):
    CommandStart(builder)

def CommandAddType(builder, type):
    builder.PrependInt8Slot(0, type, 0)

def AddType(builder, type):
    CommandAddType(builder, type)

def CommandAddMotorControl(builder, motorControl):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(motorControl), 0)

def AddMotorControl(builder, motorControl):
    CommandAddMotorControl(builder, motorControl)

def CommandAddEncoderControl(builder, encoderControl):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(encoderControl), 0)

def AddEncoderControl(builder, encoderControl):
    CommandAddEncoderControl(builder, encoderControl)

def CommandEnd(builder):
    return builder.EndObject()

def End(builder):
    return CommandEnd(builder)

import MotorControl.EncoderCommand
import MotorControl.MotorCommand
try:
    from typing import Optional
except:
    pass

class CommandT(object):

    # CommandT
    def __init__(self):
        self.type = 0  # type: int
        self.motorControl = None  # type: Optional[MotorControl.MotorCommand.MotorCommandT]
        self.encoderControl = None  # type: Optional[MotorControl.EncoderCommand.EncoderCommandT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        command = Command()
        command.Init(buf, pos)
        return cls.InitFromObj(command)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, command):
        x = CommandT()
        x._UnPack(command)
        return x

    # CommandT
    def _UnPack(self, command):
        if command is None:
            return
        self.type = command.Type()
        if command.MotorControl() is not None:
            self.motorControl = MotorControl.MotorCommand.MotorCommandT.InitFromObj(command.MotorControl())
        if command.EncoderControl() is not None:
            self.encoderControl = MotorControl.EncoderCommand.EncoderCommandT.InitFromObj(command.EncoderControl())

    # CommandT
    def Pack(self, builder):
        if self.motorControl is not None:
            motorControl = self.motorControl.Pack(builder)
        if self.encoderControl is not None:
            encoderControl = self.encoderControl.Pack(builder)
        CommandStart(builder)
        CommandAddType(builder, self.type)
        if self.motorControl is not None:
            CommandAddMotorControl(builder, motorControl)
        if self.encoderControl is not None:
            CommandAddEncoderControl(builder, encoderControl)
        command = CommandEnd(builder)
        return command
