namespace fbs;

// Source: Main Pico
// Destination: Web Dashboard, Display

file_identifier "ROBO";

// Define enums for control sources and status codes
enum ControlSource : byte { Manual, FlightController, OnboardComputer, RC }
enum Status : byte { OK, NO_TX_SIGNAL, LOW_BATTERY, MOTOR_ERROR, DISARMED }

// Define a table for motor information
table Motor {
    temperature: float = 0.0;
    rps: float = 0.0;
    angle: float = 0.0;
    torque: float = 0.0;
}

// Define a table for the motors group
table Motors {
    motor1: Motor;
    motor2: Motor;
}

table DisplayMessages {
    message1: string;
    message2: string;
    message3: string;
    message4: string;
    message5: string;
    message6: string;
    message7: string;
}


table CrsfTelemetry {
  /// Signal strength indicator
  rssi: ubyte = 0;         
  /// Link quality
  link_quality: ubyte = 0; 
  /// Signal to noise ratio
  snr: byte = 0;           
  /// Transmission power
  tx_power: ushort = 0;
}

struct CrsfChannels {
  data: [ushort:16];
}

table CrsfData {
  channels: CrsfChannels;
  /// Telemetry data associated with the RC frame
  telemetry: CrsfTelemetry;
  /// Failsafe flag with a default value of true
  failsafe:bool = true;
}


// Define the main table for your data structure
table Robot {
    batteries: int = 4;
    control_source: ControlSource = RC;
    status: Status = OK;
    motors: Motors;
    voltage: float = 0.0;
    current: float = 0.0;
    fuel: float = 0.0;
    crsf_data: CrsfData;
    max_speed: float = 0.0;
    low_voltage_threshold: float = 12.0;
    critical_voltage_threshold: float = 16.0;
    rssi_threshold: int = 0;
    link_quality_threshold: int = 0;
    left_motor_fold_angle: int;
    right_motor_fold_angle: int;
    motor_error_code: string; // Defaults not supported for strings
    enable_rover: bool = false;
    display_messages: DisplayMessages;
}

// Define the root type and possible update types
root_type Robot;
