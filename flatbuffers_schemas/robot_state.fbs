namespace fbs;

// Source: Main Pico
// Destination: Web Dashboard, Display

file_identifier "ROBO";

// Define enums for control sources and status codes
enum ControlSource : byte { Manual, OnboardComputer, FlightController}
enum Status : byte { OK, NO_TX_SIGNAL, LOW_BATTERY, MOTOR_ERROR, DISARMED }

// Define a table for motor information
table Motor {
    temperature: float = 0.0;
    rps: float = 0.0;
    angle: float = 0.0;
    torque: float = 0.0;
}

table MotorLimits {
    max_speed: float = -1;
    max_current: float = -1;
    max_torque: float = -1;
    speed_kp: float = 1.0;
    speed_ki: float = 0.002;
}

// Define a table for the motors group
table Motors {
    motor1: Motor;
    motor2: Motor;
}

table DisplayMessages {
    message1: string;
    message2: string;
    message3: string;
    message4: string;
    message5: string;
    message6: string;
    message7: string;
}


table CrsfTelemetry {
  /// Signal strength indicator
  rssi: ubyte = 0;         
  /// Link quality
  link_quality: ubyte = 0; 
  /// Signal to noise ratio
  snr: byte = 0;           
  /// Transmission power
  tx_power: ushort = 0;
}

table CrsfChannels {
  c1: ushort = 0;
  c2: ushort = 0;
  c3: ushort = 0;
  c4: ushort = 0;
  c5: ushort = 0;
  c6: ushort = 0;
  c7: ushort = 0;
  c8: ushort = 0;
  c9: ushort = 0;
  c10: ushort = 0;
  c11: ushort = 0;
  c12: ushort = 0;
  c13: ushort = 0;
  c14: ushort = 0;
  c15: ushort = 0;
  c16: ushort = 0;
}

table CrsfData {
  channels: CrsfChannels;
  /// Telemetry data associated with the RC frame
  telemetry: CrsfTelemetry;
  /// Failsafe flag with a default value of true
  failsafe:bool = true;
}


// Define the main table for your data structure
table Robot {
    batteries: ubyte = 4;
    control_source: ControlSource = Manual;
    status: Status = OK;
    motors: Motors;
    voltage: float = 0.0;
    current: float = 0.0;
    fuel: float = 0.0;
    crsf_data: CrsfData;
    left_motor_limits: MotorLimits;
    right_motor_limits: MotorLimits;
    low_voltage_threshold: float = 12.0;
    critical_voltage_threshold: float = 16.0;
    rssi_threshold: ubyte = 0;
    link_quality_threshold: ubyte = 0;
    left_motor_fold_angle: ubyte;
    right_motor_fold_angle: ubyte;
    motor_error_code: string; // Defaults not supported for strings
    enable_rover: bool = false;
    display_messages: DisplayMessages;
    /// This will only occur if all physical switches are in the ON/ABSENT state.
    start_web_server_on_launch: bool = false;
    crsf_link_stats_timeout_millis: ushort = 2000;
    web_server_enabled: bool = false;
}

// Define the root type and possible update types
root_type Robot;
