// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Empty {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Empty {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEmpty(bb:flatbuffers.ByteBuffer, obj?:Empty):Empty {
  return (obj || new Empty()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEmpty(bb:flatbuffers.ByteBuffer, obj?:Empty):Empty {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Empty()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startEmpty(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endEmpty(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEmptyBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedEmptyBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createEmpty(builder:flatbuffers.Builder):flatbuffers.Offset {
  Empty.startEmpty(builder);
  return Empty.endEmpty(builder);
}
}
