// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class TxMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TxMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTxMessage(bb:flatbuffers.ByteBuffer, obj?:TxMessage):TxMessage {
  return (obj || new TxMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTxMessage(bb:flatbuffers.ByteBuffer, obj?:TxMessage):TxMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TxMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('OCTX');
}

crsfFrameType():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

/**
 * excludes CRC byte
 */
payloadLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

payloadData(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

payloadDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

payloadDataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startTxMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCrsfFrameType(builder:flatbuffers.Builder, crsfFrameType:number) {
  builder.addFieldInt8(0, crsfFrameType, 0);
}

static addPayloadLength(builder:flatbuffers.Builder, payloadLength:number) {
  builder.addFieldInt8(1, payloadLength, 0);
}

static addPayloadData(builder:flatbuffers.Builder, payloadDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, payloadDataOffset, 0);
}

static createPayloadDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startPayloadDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endTxMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTxMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'OCTX');
}

static finishSizePrefixedTxMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'OCTX', true);
}

static createTxMessage(builder:flatbuffers.Builder, crsfFrameType:number, payloadLength:number, payloadDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  TxMessage.startTxMessage(builder);
  TxMessage.addCrsfFrameType(builder, crsfFrameType);
  TxMessage.addPayloadLength(builder, payloadLength);
  TxMessage.addPayloadData(builder, payloadDataOffset);
  return TxMessage.endTxMessage(builder);
}
}
