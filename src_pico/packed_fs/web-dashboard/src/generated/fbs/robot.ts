// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ControlSource } from '../fbs/control-source.js';
import { Motors } from '../fbs/motors.js';
import { Status } from '../fbs/status.js';


export class Robot {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Robot {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRobot(bb:flatbuffers.ByteBuffer, obj?:Robot):Robot {
  return (obj || new Robot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRobot(bb:flatbuffers.ByteBuffer, obj?:Robot):Robot {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Robot()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('ROBO');
}

batteries():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 4;
}

controlSource():ControlSource {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ControlSource.RC;
}

status():Status {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Status.OK;
}

motors(obj?:Motors):Motors|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Motors()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

voltage():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

current():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

fuel():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rssi():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

signalStrength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

lowVoltageThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 12.0;
}

criticalVoltageThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 16.0;
}

referenceWheelAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

motorErrorCode():string|null
motorErrorCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
motorErrorCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

wheelsFolded():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

enableRover():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startRobot(builder:flatbuffers.Builder) {
  builder.startObject(16);
}

static addBatteries(builder:flatbuffers.Builder, batteries:number) {
  builder.addFieldInt32(0, batteries, 4);
}

static addControlSource(builder:flatbuffers.Builder, controlSource:ControlSource) {
  builder.addFieldInt8(1, controlSource, ControlSource.RC);
}

static addStatus(builder:flatbuffers.Builder, status:Status) {
  builder.addFieldInt8(2, status, Status.OK);
}

static addMotors(builder:flatbuffers.Builder, motorsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, motorsOffset, 0);
}

static addVoltage(builder:flatbuffers.Builder, voltage:number) {
  builder.addFieldFloat32(4, voltage, 0.0);
}

static addCurrent(builder:flatbuffers.Builder, current:number) {
  builder.addFieldFloat32(5, current, 0.0);
}

static addFuel(builder:flatbuffers.Builder, fuel:number) {
  builder.addFieldFloat32(6, fuel, 0.0);
}

static addRssi(builder:flatbuffers.Builder, rssi:number) {
  builder.addFieldFloat32(7, rssi, 0.0);
}

static addSignalStrength(builder:flatbuffers.Builder, signalStrength:number) {
  builder.addFieldInt32(8, signalStrength, 0);
}

static addMaxSpeed(builder:flatbuffers.Builder, maxSpeed:number) {
  builder.addFieldFloat32(9, maxSpeed, 0.0);
}

static addLowVoltageThreshold(builder:flatbuffers.Builder, lowVoltageThreshold:number) {
  builder.addFieldFloat32(10, lowVoltageThreshold, 12.0);
}

static addCriticalVoltageThreshold(builder:flatbuffers.Builder, criticalVoltageThreshold:number) {
  builder.addFieldFloat32(11, criticalVoltageThreshold, 16.0);
}

static addReferenceWheelAngle(builder:flatbuffers.Builder, referenceWheelAngle:number) {
  builder.addFieldInt32(12, referenceWheelAngle, 0);
}

static addMotorErrorCode(builder:flatbuffers.Builder, motorErrorCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, motorErrorCodeOffset, 0);
}

static addWheelsFolded(builder:flatbuffers.Builder, wheelsFolded:boolean) {
  builder.addFieldInt8(14, +wheelsFolded, +false);
}

static addEnableRover(builder:flatbuffers.Builder, enableRover:boolean) {
  builder.addFieldInt8(15, +enableRover, +false);
}

static endRobot(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRobotBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ROBO');
}

static finishSizePrefixedRobotBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'ROBO', true);
}

}
