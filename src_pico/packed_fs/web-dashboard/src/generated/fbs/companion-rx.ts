// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CompanionRxUnion, unionToCompanionRxUnion, unionListToCompanionRxUnion } from '../fbs/companion-rx-union.js';


export class CompanionRx {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CompanionRx {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCompanionRx(bb:flatbuffers.ByteBuffer, obj?:CompanionRx):CompanionRx {
  return (obj || new CompanionRx()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCompanionRx(bb:flatbuffers.ByteBuffer, obj?:CompanionRx):CompanionRx {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CompanionRx()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('CNRX');
}

messageType():CompanionRxUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : CompanionRxUnion.NONE;
}

message<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startCompanionRx(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMessageType(builder:flatbuffers.Builder, messageType:CompanionRxUnion) {
  builder.addFieldInt8(0, messageType, CompanionRxUnion.NONE);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static endCompanionRx(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCompanionRxBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CNRX');
}

static finishSizePrefixedCompanionRxBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'CNRX', true);
}

static createCompanionRx(builder:flatbuffers.Builder, messageType:CompanionRxUnion, messageOffset:flatbuffers.Offset):flatbuffers.Offset {
  CompanionRx.startCompanionRx(builder);
  CompanionRx.addMessageType(builder, messageType);
  CompanionRx.addMessage(builder, messageOffset);
  return CompanionRx.endCompanionRx(builder);
}
}
