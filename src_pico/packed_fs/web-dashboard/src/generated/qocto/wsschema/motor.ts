// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Motor {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Motor {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMotor(bb:flatbuffers.ByteBuffer, obj?:Motor):Motor {
  return (obj || new Motor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMotor(bb:flatbuffers.ByteBuffer, obj?:Motor):Motor {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Motor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

temperature():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rps():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

angle():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startMotor(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTemperature(builder:flatbuffers.Builder, temperature:number) {
  builder.addFieldFloat32(0, temperature, 0.0);
}

static addRps(builder:flatbuffers.Builder, rps:number) {
  builder.addFieldFloat32(1, rps, 0.0);
}

static addAngle(builder:flatbuffers.Builder, angle:number) {
  builder.addFieldFloat32(2, angle, 0.0);
}

static endMotor(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMotor(builder:flatbuffers.Builder, temperature:number, rps:number, angle:number):flatbuffers.Offset {
  Motor.startMotor(builder);
  Motor.addTemperature(builder, temperature);
  Motor.addRps(builder, rps);
  Motor.addAngle(builder, angle);
  return Motor.endMotor(builder);
}
}
