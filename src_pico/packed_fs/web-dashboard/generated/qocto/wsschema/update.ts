// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { UpdateBatteries } from '../../qocto/wsschema/update-batteries.js';
import { UpdateCriticalVoltageThreshold } from '../../qocto/wsschema/update-critical-voltage-threshold.js';
import { UpdateEnableRover } from '../../qocto/wsschema/update-enable-rover.js';
import { UpdateLowVoltageThreshold } from '../../qocto/wsschema/update-low-voltage-threshold.js';
import { UpdateReferenceWheelAngle } from '../../qocto/wsschema/update-reference-wheel-angle.js';
import { UpdateWheelsFolded } from '../../qocto/wsschema/update-wheels-folded.js';


export enum Update {
  NONE = 0,
  UpdateBatteries = 1,
  UpdateLowVoltageThreshold = 2,
  UpdateCriticalVoltageThreshold = 3,
  UpdateReferenceWheelAngle = 4,
  UpdateWheelsFolded = 5,
  UpdateEnableRover = 6
}

export function unionToUpdate(
  type: Update,
  accessor: (obj:UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateWheelsFolded) => UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateWheelsFolded|null
): UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateWheelsFolded|null {
  switch(Update[type]) {
    case 'NONE': return null; 
    case 'UpdateBatteries': return accessor(new UpdateBatteries())! as UpdateBatteries;
    case 'UpdateLowVoltageThreshold': return accessor(new UpdateLowVoltageThreshold())! as UpdateLowVoltageThreshold;
    case 'UpdateCriticalVoltageThreshold': return accessor(new UpdateCriticalVoltageThreshold())! as UpdateCriticalVoltageThreshold;
    case 'UpdateReferenceWheelAngle': return accessor(new UpdateReferenceWheelAngle())! as UpdateReferenceWheelAngle;
    case 'UpdateWheelsFolded': return accessor(new UpdateWheelsFolded())! as UpdateWheelsFolded;
    case 'UpdateEnableRover': return accessor(new UpdateEnableRover())! as UpdateEnableRover;
    default: return null;
  }
}

export function unionListToUpdate(
  type: Update, 
  accessor: (index: number, obj:UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateWheelsFolded) => UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateWheelsFolded|null, 
  index: number
): UpdateBatteries|UpdateCriticalVoltageThreshold|UpdateEnableRover|UpdateLowVoltageThreshold|UpdateReferenceWheelAngle|UpdateWheelsFolded|null {
  switch(Update[type]) {
    case 'NONE': return null; 
    case 'UpdateBatteries': return accessor(index, new UpdateBatteries())! as UpdateBatteries;
    case 'UpdateLowVoltageThreshold': return accessor(index, new UpdateLowVoltageThreshold())! as UpdateLowVoltageThreshold;
    case 'UpdateCriticalVoltageThreshold': return accessor(index, new UpdateCriticalVoltageThreshold())! as UpdateCriticalVoltageThreshold;
    case 'UpdateReferenceWheelAngle': return accessor(index, new UpdateReferenceWheelAngle())! as UpdateReferenceWheelAngle;
    case 'UpdateWheelsFolded': return accessor(index, new UpdateWheelsFolded())! as UpdateWheelsFolded;
    case 'UpdateEnableRover': return accessor(index, new UpdateEnableRover())! as UpdateEnableRover;
    default: return null;
  }
}
