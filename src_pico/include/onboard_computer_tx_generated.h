// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ONBOARDCOMPUTERTX_FBS_H_
#define FLATBUFFERS_GENERATED_ONBOARDCOMPUTERTX_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "robot_state_generated.h"

namespace fbs {

struct CrsfFrame;
struct CrsfFrameBuilder;
struct CrsfFrameT;

struct TankDriveConfig;
struct TankDriveConfigBuilder;
struct TankDriveConfigT;

struct MixedDriveConfig;
struct MixedDriveConfigBuilder;
struct MixedDriveConfigT;

struct DriveRobot;
struct DriveRobotBuilder;
struct DriveRobotT;

struct OnboardComputerTx;
struct OnboardComputerTxBuilder;
struct OnboardComputerTxT;

enum DriveMode : int8_t {
  DriveMode_Tank = 0,
  DriveMode_Mixed = 1,
  DriveMode_MIN = DriveMode_Tank,
  DriveMode_MAX = DriveMode_Mixed
};

inline const DriveMode (&EnumValuesDriveMode())[2] {
  static const DriveMode values[] = {
    DriveMode_Tank,
    DriveMode_Mixed
  };
  return values;
}

inline const char * const *EnumNamesDriveMode() {
  static const char * const names[3] = {
    "Tank",
    "Mixed",
    nullptr
  };
  return names;
}

inline const char *EnumNameDriveMode(DriveMode e) {
  if (::flatbuffers::IsOutRange(e, DriveMode_Tank, DriveMode_Mixed)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDriveMode()[index];
}

enum DriveConfig : uint8_t {
  DriveConfig_NONE = 0,
  DriveConfig_TankDriveConfig = 1,
  DriveConfig_MixedDriveConfig = 2,
  DriveConfig_MIN = DriveConfig_NONE,
  DriveConfig_MAX = DriveConfig_MixedDriveConfig
};

inline const DriveConfig (&EnumValuesDriveConfig())[3] {
  static const DriveConfig values[] = {
    DriveConfig_NONE,
    DriveConfig_TankDriveConfig,
    DriveConfig_MixedDriveConfig
  };
  return values;
}

inline const char * const *EnumNamesDriveConfig() {
  static const char * const names[4] = {
    "NONE",
    "TankDriveConfig",
    "MixedDriveConfig",
    nullptr
  };
  return names;
}

inline const char *EnumNameDriveConfig(DriveConfig e) {
  if (::flatbuffers::IsOutRange(e, DriveConfig_NONE, DriveConfig_MixedDriveConfig)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDriveConfig()[index];
}

template<typename T> struct DriveConfigTraits {
  static const DriveConfig enum_value = DriveConfig_NONE;
};

template<> struct DriveConfigTraits<fbs::TankDriveConfig> {
  static const DriveConfig enum_value = DriveConfig_TankDriveConfig;
};

template<> struct DriveConfigTraits<fbs::MixedDriveConfig> {
  static const DriveConfig enum_value = DriveConfig_MixedDriveConfig;
};

template<typename T> struct DriveConfigUnionTraits {
  static const DriveConfig enum_value = DriveConfig_NONE;
};

template<> struct DriveConfigUnionTraits<fbs::TankDriveConfigT> {
  static const DriveConfig enum_value = DriveConfig_TankDriveConfig;
};

template<> struct DriveConfigUnionTraits<fbs::MixedDriveConfigT> {
  static const DriveConfig enum_value = DriveConfig_MixedDriveConfig;
};

struct DriveConfigUnion {
  DriveConfig type;
  void *value;

  DriveConfigUnion() : type(DriveConfig_NONE), value(nullptr) {}
  DriveConfigUnion(DriveConfigUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(DriveConfig_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  DriveConfigUnion(const DriveConfigUnion &);
  DriveConfigUnion &operator=(const DriveConfigUnion &u)
    { DriveConfigUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  DriveConfigUnion &operator=(DriveConfigUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~DriveConfigUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = DriveConfigUnionTraits<RT>::enum_value;
    if (type != DriveConfig_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, DriveConfig type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  fbs::TankDriveConfigT *AsTankDriveConfig() {
    return type == DriveConfig_TankDriveConfig ?
      reinterpret_cast<fbs::TankDriveConfigT *>(value) : nullptr;
  }
  const fbs::TankDriveConfigT *AsTankDriveConfig() const {
    return type == DriveConfig_TankDriveConfig ?
      reinterpret_cast<const fbs::TankDriveConfigT *>(value) : nullptr;
  }
  fbs::MixedDriveConfigT *AsMixedDriveConfig() {
    return type == DriveConfig_MixedDriveConfig ?
      reinterpret_cast<fbs::MixedDriveConfigT *>(value) : nullptr;
  }
  const fbs::MixedDriveConfigT *AsMixedDriveConfig() const {
    return type == DriveConfig_MixedDriveConfig ?
      reinterpret_cast<const fbs::MixedDriveConfigT *>(value) : nullptr;
  }
};

bool VerifyDriveConfig(::flatbuffers::Verifier &verifier, const void *obj, DriveConfig type);
bool VerifyDriveConfigVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

enum OnboardComputerTxUnion : uint8_t {
  OnboardComputerTxUnion_NONE = 0,
  /// A frame to be sent to the transmitter.
  OnboardComputerTxUnion_CrsfFrame = 1,
  OnboardComputerTxUnion_DriveRobot = 2,
  OnboardComputerTxUnion_DisplayMessages = 3,
  OnboardComputerTxUnion_MIN = OnboardComputerTxUnion_NONE,
  OnboardComputerTxUnion_MAX = OnboardComputerTxUnion_DisplayMessages
};

inline const OnboardComputerTxUnion (&EnumValuesOnboardComputerTxUnion())[4] {
  static const OnboardComputerTxUnion values[] = {
    OnboardComputerTxUnion_NONE,
    OnboardComputerTxUnion_CrsfFrame,
    OnboardComputerTxUnion_DriveRobot,
    OnboardComputerTxUnion_DisplayMessages
  };
  return values;
}

inline const char * const *EnumNamesOnboardComputerTxUnion() {
  static const char * const names[5] = {
    "NONE",
    "CrsfFrame",
    "DriveRobot",
    "DisplayMessages",
    nullptr
  };
  return names;
}

inline const char *EnumNameOnboardComputerTxUnion(OnboardComputerTxUnion e) {
  if (::flatbuffers::IsOutRange(e, OnboardComputerTxUnion_NONE, OnboardComputerTxUnion_DisplayMessages)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOnboardComputerTxUnion()[index];
}

template<typename T> struct OnboardComputerTxUnionTraits {
  static const OnboardComputerTxUnion enum_value = OnboardComputerTxUnion_NONE;
};

template<> struct OnboardComputerTxUnionTraits<fbs::CrsfFrame> {
  static const OnboardComputerTxUnion enum_value = OnboardComputerTxUnion_CrsfFrame;
};

template<> struct OnboardComputerTxUnionTraits<fbs::DriveRobot> {
  static const OnboardComputerTxUnion enum_value = OnboardComputerTxUnion_DriveRobot;
};

template<> struct OnboardComputerTxUnionTraits<fbs::DisplayMessages> {
  static const OnboardComputerTxUnion enum_value = OnboardComputerTxUnion_DisplayMessages;
};

template<typename T> struct OnboardComputerTxUnionUnionTraits {
  static const OnboardComputerTxUnion enum_value = OnboardComputerTxUnion_NONE;
};

template<> struct OnboardComputerTxUnionUnionTraits<fbs::CrsfFrameT> {
  static const OnboardComputerTxUnion enum_value = OnboardComputerTxUnion_CrsfFrame;
};

template<> struct OnboardComputerTxUnionUnionTraits<fbs::DriveRobotT> {
  static const OnboardComputerTxUnion enum_value = OnboardComputerTxUnion_DriveRobot;
};

template<> struct OnboardComputerTxUnionUnionTraits<fbs::DisplayMessagesT> {
  static const OnboardComputerTxUnion enum_value = OnboardComputerTxUnion_DisplayMessages;
};

struct OnboardComputerTxUnionUnion {
  OnboardComputerTxUnion type;
  void *value;

  OnboardComputerTxUnionUnion() : type(OnboardComputerTxUnion_NONE), value(nullptr) {}
  OnboardComputerTxUnionUnion(OnboardComputerTxUnionUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(OnboardComputerTxUnion_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  OnboardComputerTxUnionUnion(const OnboardComputerTxUnionUnion &);
  OnboardComputerTxUnionUnion &operator=(const OnboardComputerTxUnionUnion &u)
    { OnboardComputerTxUnionUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  OnboardComputerTxUnionUnion &operator=(OnboardComputerTxUnionUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~OnboardComputerTxUnionUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = OnboardComputerTxUnionUnionTraits<RT>::enum_value;
    if (type != OnboardComputerTxUnion_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, OnboardComputerTxUnion type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  fbs::CrsfFrameT *AsCrsfFrame() {
    return type == OnboardComputerTxUnion_CrsfFrame ?
      reinterpret_cast<fbs::CrsfFrameT *>(value) : nullptr;
  }
  const fbs::CrsfFrameT *AsCrsfFrame() const {
    return type == OnboardComputerTxUnion_CrsfFrame ?
      reinterpret_cast<const fbs::CrsfFrameT *>(value) : nullptr;
  }
  fbs::DriveRobotT *AsDriveRobot() {
    return type == OnboardComputerTxUnion_DriveRobot ?
      reinterpret_cast<fbs::DriveRobotT *>(value) : nullptr;
  }
  const fbs::DriveRobotT *AsDriveRobot() const {
    return type == OnboardComputerTxUnion_DriveRobot ?
      reinterpret_cast<const fbs::DriveRobotT *>(value) : nullptr;
  }
  fbs::DisplayMessagesT *AsDisplayMessages() {
    return type == OnboardComputerTxUnion_DisplayMessages ?
      reinterpret_cast<fbs::DisplayMessagesT *>(value) : nullptr;
  }
  const fbs::DisplayMessagesT *AsDisplayMessages() const {
    return type == OnboardComputerTxUnion_DisplayMessages ?
      reinterpret_cast<const fbs::DisplayMessagesT *>(value) : nullptr;
  }
};

bool VerifyOnboardComputerTxUnion(::flatbuffers::Verifier &verifier, const void *obj, OnboardComputerTxUnion type);
bool VerifyOnboardComputerTxUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct CrsfFrameT : public ::flatbuffers::NativeTable {
  typedef CrsfFrame TableType;
  uint8_t crsf_frame_type = 0;
  uint8_t payload_length = 0;
  std::vector<uint8_t> payload_data{};
};

struct CrsfFrame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CrsfFrameT NativeTableType;
  typedef CrsfFrameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CRSF_FRAME_TYPE = 4,
    VT_PAYLOAD_LENGTH = 6,
    VT_PAYLOAD_DATA = 8
  };
  uint8_t crsf_frame_type() const {
    return GetField<uint8_t>(VT_CRSF_FRAME_TYPE, 0);
  }
  /// excludes CRC byte
  uint8_t payload_length() const {
    return GetField<uint8_t>(VT_PAYLOAD_LENGTH, 0);
  }
  const ::flatbuffers::Vector<uint8_t> *payload_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_PAYLOAD_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CRSF_FRAME_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_LENGTH, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD_DATA) &&
           verifier.VerifyVector(payload_data()) &&
           verifier.EndTable();
  }
  CrsfFrameT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CrsfFrameT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<CrsfFrame> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CrsfFrameT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CrsfFrameBuilder {
  typedef CrsfFrame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_crsf_frame_type(uint8_t crsf_frame_type) {
    fbb_.AddElement<uint8_t>(CrsfFrame::VT_CRSF_FRAME_TYPE, crsf_frame_type, 0);
  }
  void add_payload_length(uint8_t payload_length) {
    fbb_.AddElement<uint8_t>(CrsfFrame::VT_PAYLOAD_LENGTH, payload_length, 0);
  }
  void add_payload_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> payload_data) {
    fbb_.AddOffset(CrsfFrame::VT_PAYLOAD_DATA, payload_data);
  }
  explicit CrsfFrameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CrsfFrame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CrsfFrame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CrsfFrame> CreateCrsfFrame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t crsf_frame_type = 0,
    uint8_t payload_length = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> payload_data = 0) {
  CrsfFrameBuilder builder_(_fbb);
  builder_.add_payload_data(payload_data);
  builder_.add_payload_length(payload_length);
  builder_.add_crsf_frame_type(crsf_frame_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CrsfFrame> CreateCrsfFrameDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t crsf_frame_type = 0,
    uint8_t payload_length = 0,
    const std::vector<uint8_t> *payload_data = nullptr) {
  auto payload_data__ = payload_data ? _fbb.CreateVector<uint8_t>(*payload_data) : 0;
  return fbs::CreateCrsfFrame(
      _fbb,
      crsf_frame_type,
      payload_length,
      payload_data__);
}

::flatbuffers::Offset<CrsfFrame> CreateCrsfFrame(::flatbuffers::FlatBufferBuilder &_fbb, const CrsfFrameT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TankDriveConfigT : public ::flatbuffers::NativeTable {
  typedef TankDriveConfig TableType;
  float left_rad_s = 0.0f;
  float right_rad_s = 0.0f;
};

struct TankDriveConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TankDriveConfigT NativeTableType;
  typedef TankDriveConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LEFT_RAD_S = 4,
    VT_RIGHT_RAD_S = 6
  };
  float left_rad_s() const {
    return GetField<float>(VT_LEFT_RAD_S, 0.0f);
  }
  float right_rad_s() const {
    return GetField<float>(VT_RIGHT_RAD_S, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_LEFT_RAD_S, 4) &&
           VerifyField<float>(verifier, VT_RIGHT_RAD_S, 4) &&
           verifier.EndTable();
  }
  TankDriveConfigT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TankDriveConfigT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<TankDriveConfig> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TankDriveConfigT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TankDriveConfigBuilder {
  typedef TankDriveConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_left_rad_s(float left_rad_s) {
    fbb_.AddElement<float>(TankDriveConfig::VT_LEFT_RAD_S, left_rad_s, 0.0f);
  }
  void add_right_rad_s(float right_rad_s) {
    fbb_.AddElement<float>(TankDriveConfig::VT_RIGHT_RAD_S, right_rad_s, 0.0f);
  }
  explicit TankDriveConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TankDriveConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TankDriveConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TankDriveConfig> CreateTankDriveConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float left_rad_s = 0.0f,
    float right_rad_s = 0.0f) {
  TankDriveConfigBuilder builder_(_fbb);
  builder_.add_right_rad_s(right_rad_s);
  builder_.add_left_rad_s(left_rad_s);
  return builder_.Finish();
}

::flatbuffers::Offset<TankDriveConfig> CreateTankDriveConfig(::flatbuffers::FlatBufferBuilder &_fbb, const TankDriveConfigT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MixedDriveConfigT : public ::flatbuffers::NativeTable {
  typedef MixedDriveConfig TableType;
  float rad_s = 0.0f;
  float direction = 0.0f;
};

struct MixedDriveConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MixedDriveConfigT NativeTableType;
  typedef MixedDriveConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RAD_S = 4,
    VT_DIRECTION = 6
  };
  float rad_s() const {
    return GetField<float>(VT_RAD_S, 0.0f);
  }
  float direction() const {
    return GetField<float>(VT_DIRECTION, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_RAD_S, 4) &&
           VerifyField<float>(verifier, VT_DIRECTION, 4) &&
           verifier.EndTable();
  }
  MixedDriveConfigT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MixedDriveConfigT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<MixedDriveConfig> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MixedDriveConfigT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MixedDriveConfigBuilder {
  typedef MixedDriveConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_rad_s(float rad_s) {
    fbb_.AddElement<float>(MixedDriveConfig::VT_RAD_S, rad_s, 0.0f);
  }
  void add_direction(float direction) {
    fbb_.AddElement<float>(MixedDriveConfig::VT_DIRECTION, direction, 0.0f);
  }
  explicit MixedDriveConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MixedDriveConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MixedDriveConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MixedDriveConfig> CreateMixedDriveConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float rad_s = 0.0f,
    float direction = 0.0f) {
  MixedDriveConfigBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_rad_s(rad_s);
  return builder_.Finish();
}

::flatbuffers::Offset<MixedDriveConfig> CreateMixedDriveConfig(::flatbuffers::FlatBufferBuilder &_fbb, const MixedDriveConfigT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct DriveRobotT : public ::flatbuffers::NativeTable {
  typedef DriveRobot TableType;
  fbs::DriveConfigUnion config{};
};

struct DriveRobot FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DriveRobotT NativeTableType;
  typedef DriveRobotBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONFIG_TYPE = 4,
    VT_CONFIG = 6
  };
  fbs::DriveConfig config_type() const {
    return static_cast<fbs::DriveConfig>(GetField<uint8_t>(VT_CONFIG_TYPE, 0));
  }
  const void *config() const {
    return GetPointer<const void *>(VT_CONFIG);
  }
  template<typename T> const T *config_as() const;
  const fbs::TankDriveConfig *config_as_TankDriveConfig() const {
    return config_type() == fbs::DriveConfig_TankDriveConfig ? static_cast<const fbs::TankDriveConfig *>(config()) : nullptr;
  }
  const fbs::MixedDriveConfig *config_as_MixedDriveConfig() const {
    return config_type() == fbs::DriveConfig_MixedDriveConfig ? static_cast<const fbs::MixedDriveConfig *>(config()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONFIG_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONFIG) &&
           VerifyDriveConfig(verifier, config(), config_type()) &&
           verifier.EndTable();
  }
  DriveRobotT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DriveRobotT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<DriveRobot> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DriveRobotT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const fbs::TankDriveConfig *DriveRobot::config_as<fbs::TankDriveConfig>() const {
  return config_as_TankDriveConfig();
}

template<> inline const fbs::MixedDriveConfig *DriveRobot::config_as<fbs::MixedDriveConfig>() const {
  return config_as_MixedDriveConfig();
}

struct DriveRobotBuilder {
  typedef DriveRobot Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_config_type(fbs::DriveConfig config_type) {
    fbb_.AddElement<uint8_t>(DriveRobot::VT_CONFIG_TYPE, static_cast<uint8_t>(config_type), 0);
  }
  void add_config(::flatbuffers::Offset<void> config) {
    fbb_.AddOffset(DriveRobot::VT_CONFIG, config);
  }
  explicit DriveRobotBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DriveRobot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DriveRobot>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DriveRobot> CreateDriveRobot(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fbs::DriveConfig config_type = fbs::DriveConfig_NONE,
    ::flatbuffers::Offset<void> config = 0) {
  DriveRobotBuilder builder_(_fbb);
  builder_.add_config(config);
  builder_.add_config_type(config_type);
  return builder_.Finish();
}

::flatbuffers::Offset<DriveRobot> CreateDriveRobot(::flatbuffers::FlatBufferBuilder &_fbb, const DriveRobotT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct OnboardComputerTxT : public ::flatbuffers::NativeTable {
  typedef OnboardComputerTx TableType;
  fbs::OnboardComputerTxUnionUnion message{};
};

struct OnboardComputerTx FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnboardComputerTxT NativeTableType;
  typedef OnboardComputerTxBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  fbs::OnboardComputerTxUnion message_type() const {
    return static_cast<fbs::OnboardComputerTxUnion>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const fbs::CrsfFrame *message_as_CrsfFrame() const {
    return message_type() == fbs::OnboardComputerTxUnion_CrsfFrame ? static_cast<const fbs::CrsfFrame *>(message()) : nullptr;
  }
  const fbs::DriveRobot *message_as_DriveRobot() const {
    return message_type() == fbs::OnboardComputerTxUnion_DriveRobot ? static_cast<const fbs::DriveRobot *>(message()) : nullptr;
  }
  const fbs::DisplayMessages *message_as_DisplayMessages() const {
    return message_type() == fbs::OnboardComputerTxUnion_DisplayMessages ? static_cast<const fbs::DisplayMessages *>(message()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyOnboardComputerTxUnion(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
  OnboardComputerTxT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OnboardComputerTxT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<OnboardComputerTx> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const OnboardComputerTxT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const fbs::CrsfFrame *OnboardComputerTx::message_as<fbs::CrsfFrame>() const {
  return message_as_CrsfFrame();
}

template<> inline const fbs::DriveRobot *OnboardComputerTx::message_as<fbs::DriveRobot>() const {
  return message_as_DriveRobot();
}

template<> inline const fbs::DisplayMessages *OnboardComputerTx::message_as<fbs::DisplayMessages>() const {
  return message_as_DisplayMessages();
}

struct OnboardComputerTxBuilder {
  typedef OnboardComputerTx Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(fbs::OnboardComputerTxUnion message_type) {
    fbb_.AddElement<uint8_t>(OnboardComputerTx::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(::flatbuffers::Offset<void> message) {
    fbb_.AddOffset(OnboardComputerTx::VT_MESSAGE, message);
  }
  explicit OnboardComputerTxBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OnboardComputerTx> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OnboardComputerTx>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OnboardComputerTx> CreateOnboardComputerTx(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fbs::OnboardComputerTxUnion message_type = fbs::OnboardComputerTxUnion_NONE,
    ::flatbuffers::Offset<void> message = 0) {
  OnboardComputerTxBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

::flatbuffers::Offset<OnboardComputerTx> CreateOnboardComputerTx(::flatbuffers::FlatBufferBuilder &_fbb, const OnboardComputerTxT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CrsfFrameT *CrsfFrame::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CrsfFrameT>(new CrsfFrameT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CrsfFrame::UnPackTo(CrsfFrameT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = crsf_frame_type(); _o->crsf_frame_type = _e; }
  { auto _e = payload_length(); _o->payload_length = _e; }
  { auto _e = payload_data(); if (_e) { _o->payload_data.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->payload_data.begin()); } }
}

inline ::flatbuffers::Offset<CrsfFrame> CrsfFrame::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CrsfFrameT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCrsfFrame(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<CrsfFrame> CreateCrsfFrame(::flatbuffers::FlatBufferBuilder &_fbb, const CrsfFrameT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CrsfFrameT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _crsf_frame_type = _o->crsf_frame_type;
  auto _payload_length = _o->payload_length;
  auto _payload_data = _o->payload_data.size() ? _fbb.CreateVector(_o->payload_data) : 0;
  return fbs::CreateCrsfFrame(
      _fbb,
      _crsf_frame_type,
      _payload_length,
      _payload_data);
}

inline TankDriveConfigT *TankDriveConfig::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TankDriveConfigT>(new TankDriveConfigT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TankDriveConfig::UnPackTo(TankDriveConfigT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = left_rad_s(); _o->left_rad_s = _e; }
  { auto _e = right_rad_s(); _o->right_rad_s = _e; }
}

inline ::flatbuffers::Offset<TankDriveConfig> TankDriveConfig::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TankDriveConfigT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTankDriveConfig(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<TankDriveConfig> CreateTankDriveConfig(::flatbuffers::FlatBufferBuilder &_fbb, const TankDriveConfigT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TankDriveConfigT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _left_rad_s = _o->left_rad_s;
  auto _right_rad_s = _o->right_rad_s;
  return fbs::CreateTankDriveConfig(
      _fbb,
      _left_rad_s,
      _right_rad_s);
}

inline MixedDriveConfigT *MixedDriveConfig::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MixedDriveConfigT>(new MixedDriveConfigT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MixedDriveConfig::UnPackTo(MixedDriveConfigT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = rad_s(); _o->rad_s = _e; }
  { auto _e = direction(); _o->direction = _e; }
}

inline ::flatbuffers::Offset<MixedDriveConfig> MixedDriveConfig::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MixedDriveConfigT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMixedDriveConfig(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<MixedDriveConfig> CreateMixedDriveConfig(::flatbuffers::FlatBufferBuilder &_fbb, const MixedDriveConfigT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const MixedDriveConfigT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _rad_s = _o->rad_s;
  auto _direction = _o->direction;
  return fbs::CreateMixedDriveConfig(
      _fbb,
      _rad_s,
      _direction);
}

inline DriveRobotT *DriveRobot::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DriveRobotT>(new DriveRobotT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void DriveRobot::UnPackTo(DriveRobotT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = config_type(); _o->config.type = _e; }
  { auto _e = config(); if (_e) _o->config.value = fbs::DriveConfigUnion::UnPack(_e, config_type(), _resolver); }
}

inline ::flatbuffers::Offset<DriveRobot> DriveRobot::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DriveRobotT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDriveRobot(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<DriveRobot> CreateDriveRobot(::flatbuffers::FlatBufferBuilder &_fbb, const DriveRobotT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const DriveRobotT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _config_type = _o->config.type;
  auto _config = _o->config.Pack(_fbb);
  return fbs::CreateDriveRobot(
      _fbb,
      _config_type,
      _config);
}

inline OnboardComputerTxT *OnboardComputerTx::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<OnboardComputerTxT>(new OnboardComputerTxT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void OnboardComputerTx::UnPackTo(OnboardComputerTxT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = message_type(); _o->message.type = _e; }
  { auto _e = message(); if (_e) _o->message.value = fbs::OnboardComputerTxUnionUnion::UnPack(_e, message_type(), _resolver); }
}

inline ::flatbuffers::Offset<OnboardComputerTx> OnboardComputerTx::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const OnboardComputerTxT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOnboardComputerTx(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<OnboardComputerTx> CreateOnboardComputerTx(::flatbuffers::FlatBufferBuilder &_fbb, const OnboardComputerTxT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const OnboardComputerTxT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _message_type = _o->message.type;
  auto _message = _o->message.Pack(_fbb);
  return fbs::CreateOnboardComputerTx(
      _fbb,
      _message_type,
      _message);
}

inline bool VerifyDriveConfig(::flatbuffers::Verifier &verifier, const void *obj, DriveConfig type) {
  switch (type) {
    case DriveConfig_NONE: {
      return true;
    }
    case DriveConfig_TankDriveConfig: {
      auto ptr = reinterpret_cast<const fbs::TankDriveConfig *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DriveConfig_MixedDriveConfig: {
      auto ptr = reinterpret_cast<const fbs::MixedDriveConfig *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyDriveConfigVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyDriveConfig(
        verifier,  values->Get(i), types->GetEnum<DriveConfig>(i))) {
      return false;
    }
  }
  return true;
}

inline void *DriveConfigUnion::UnPack(const void *obj, DriveConfig type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case DriveConfig_TankDriveConfig: {
      auto ptr = reinterpret_cast<const fbs::TankDriveConfig *>(obj);
      return ptr->UnPack(resolver);
    }
    case DriveConfig_MixedDriveConfig: {
      auto ptr = reinterpret_cast<const fbs::MixedDriveConfig *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> DriveConfigUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case DriveConfig_TankDriveConfig: {
      auto ptr = reinterpret_cast<const fbs::TankDriveConfigT *>(value);
      return CreateTankDriveConfig(_fbb, ptr, _rehasher).Union();
    }
    case DriveConfig_MixedDriveConfig: {
      auto ptr = reinterpret_cast<const fbs::MixedDriveConfigT *>(value);
      return CreateMixedDriveConfig(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline DriveConfigUnion::DriveConfigUnion(const DriveConfigUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case DriveConfig_TankDriveConfig: {
      value = new fbs::TankDriveConfigT(*reinterpret_cast<fbs::TankDriveConfigT *>(u.value));
      break;
    }
    case DriveConfig_MixedDriveConfig: {
      value = new fbs::MixedDriveConfigT(*reinterpret_cast<fbs::MixedDriveConfigT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void DriveConfigUnion::Reset() {
  switch (type) {
    case DriveConfig_TankDriveConfig: {
      auto ptr = reinterpret_cast<fbs::TankDriveConfigT *>(value);
      delete ptr;
      break;
    }
    case DriveConfig_MixedDriveConfig: {
      auto ptr = reinterpret_cast<fbs::MixedDriveConfigT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = DriveConfig_NONE;
}

inline bool VerifyOnboardComputerTxUnion(::flatbuffers::Verifier &verifier, const void *obj, OnboardComputerTxUnion type) {
  switch (type) {
    case OnboardComputerTxUnion_NONE: {
      return true;
    }
    case OnboardComputerTxUnion_CrsfFrame: {
      auto ptr = reinterpret_cast<const fbs::CrsfFrame *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OnboardComputerTxUnion_DriveRobot: {
      auto ptr = reinterpret_cast<const fbs::DriveRobot *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OnboardComputerTxUnion_DisplayMessages: {
      auto ptr = reinterpret_cast<const fbs::DisplayMessages *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyOnboardComputerTxUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyOnboardComputerTxUnion(
        verifier,  values->Get(i), types->GetEnum<OnboardComputerTxUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline void *OnboardComputerTxUnionUnion::UnPack(const void *obj, OnboardComputerTxUnion type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case OnboardComputerTxUnion_CrsfFrame: {
      auto ptr = reinterpret_cast<const fbs::CrsfFrame *>(obj);
      return ptr->UnPack(resolver);
    }
    case OnboardComputerTxUnion_DriveRobot: {
      auto ptr = reinterpret_cast<const fbs::DriveRobot *>(obj);
      return ptr->UnPack(resolver);
    }
    case OnboardComputerTxUnion_DisplayMessages: {
      auto ptr = reinterpret_cast<const fbs::DisplayMessages *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> OnboardComputerTxUnionUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case OnboardComputerTxUnion_CrsfFrame: {
      auto ptr = reinterpret_cast<const fbs::CrsfFrameT *>(value);
      return CreateCrsfFrame(_fbb, ptr, _rehasher).Union();
    }
    case OnboardComputerTxUnion_DriveRobot: {
      auto ptr = reinterpret_cast<const fbs::DriveRobotT *>(value);
      return CreateDriveRobot(_fbb, ptr, _rehasher).Union();
    }
    case OnboardComputerTxUnion_DisplayMessages: {
      auto ptr = reinterpret_cast<const fbs::DisplayMessagesT *>(value);
      return CreateDisplayMessages(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline OnboardComputerTxUnionUnion::OnboardComputerTxUnionUnion(const OnboardComputerTxUnionUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case OnboardComputerTxUnion_CrsfFrame: {
      value = new fbs::CrsfFrameT(*reinterpret_cast<fbs::CrsfFrameT *>(u.value));
      break;
    }
    case OnboardComputerTxUnion_DriveRobot: {
      value = new fbs::DriveRobotT(*reinterpret_cast<fbs::DriveRobotT *>(u.value));
      break;
    }
    case OnboardComputerTxUnion_DisplayMessages: {
      value = new fbs::DisplayMessagesT(*reinterpret_cast<fbs::DisplayMessagesT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void OnboardComputerTxUnionUnion::Reset() {
  switch (type) {
    case OnboardComputerTxUnion_CrsfFrame: {
      auto ptr = reinterpret_cast<fbs::CrsfFrameT *>(value);
      delete ptr;
      break;
    }
    case OnboardComputerTxUnion_DriveRobot: {
      auto ptr = reinterpret_cast<fbs::DriveRobotT *>(value);
      delete ptr;
      break;
    }
    case OnboardComputerTxUnion_DisplayMessages: {
      auto ptr = reinterpret_cast<fbs::DisplayMessagesT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = OnboardComputerTxUnion_NONE;
}

inline const fbs::OnboardComputerTx *GetOnboardComputerTx(const void *buf) {
  return ::flatbuffers::GetRoot<fbs::OnboardComputerTx>(buf);
}

inline const fbs::OnboardComputerTx *GetSizePrefixedOnboardComputerTx(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fbs::OnboardComputerTx>(buf);
}

inline const char *OnboardComputerTxIdentifier() {
  return "OCTX";
}

inline bool OnboardComputerTxBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnboardComputerTxIdentifier());
}

inline bool SizePrefixedOnboardComputerTxBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnboardComputerTxIdentifier(), true);
}

inline bool VerifyOnboardComputerTxBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::OnboardComputerTx>(OnboardComputerTxIdentifier());
}

inline bool VerifySizePrefixedOnboardComputerTxBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::OnboardComputerTx>(OnboardComputerTxIdentifier());
}

inline void FinishOnboardComputerTxBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::OnboardComputerTx> root) {
  fbb.Finish(root, OnboardComputerTxIdentifier());
}

inline void FinishSizePrefixedOnboardComputerTxBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::OnboardComputerTx> root) {
  fbb.FinishSizePrefixed(root, OnboardComputerTxIdentifier());
}

inline std::unique_ptr<fbs::OnboardComputerTxT> UnPackOnboardComputerTx(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fbs::OnboardComputerTxT>(GetOnboardComputerTx(buf)->UnPack(res));
}

inline std::unique_ptr<fbs::OnboardComputerTxT> UnPackSizePrefixedOnboardComputerTx(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fbs::OnboardComputerTxT>(GetSizePrefixedOnboardComputerTx(buf)->UnPack(res));
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_ONBOARDCOMPUTERTX_FBS_H_
