// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OBCDRIVE_FBS_H_
#define FLATBUFFERS_GENERATED_OBCDRIVE_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fbs {

struct TankDriveConfig;
struct TankDriveConfigBuilder;

struct MixedDriveConfig;
struct MixedDriveConfigBuilder;

struct RobotDriveConfig;
struct RobotDriveConfigBuilder;

enum DriveMode : int8_t {
  DriveMode_Tank = 0,
  DriveMode_Mixed = 1,
  DriveMode_MIN = DriveMode_Tank,
  DriveMode_MAX = DriveMode_Mixed
};

inline const DriveMode (&EnumValuesDriveMode())[2] {
  static const DriveMode values[] = {
    DriveMode_Tank,
    DriveMode_Mixed
  };
  return values;
}

inline const char * const *EnumNamesDriveMode() {
  static const char * const names[3] = {
    "Tank",
    "Mixed",
    nullptr
  };
  return names;
}

inline const char *EnumNameDriveMode(DriveMode e) {
  if (::flatbuffers::IsOutRange(e, DriveMode_Tank, DriveMode_Mixed)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDriveMode()[index];
}

enum DriveConfig : uint8_t {
  DriveConfig_NONE = 0,
  DriveConfig_TankDriveConfig = 1,
  DriveConfig_MixedDriveConfig = 2,
  DriveConfig_MIN = DriveConfig_NONE,
  DriveConfig_MAX = DriveConfig_MixedDriveConfig
};

inline const DriveConfig (&EnumValuesDriveConfig())[3] {
  static const DriveConfig values[] = {
    DriveConfig_NONE,
    DriveConfig_TankDriveConfig,
    DriveConfig_MixedDriveConfig
  };
  return values;
}

inline const char * const *EnumNamesDriveConfig() {
  static const char * const names[4] = {
    "NONE",
    "TankDriveConfig",
    "MixedDriveConfig",
    nullptr
  };
  return names;
}

inline const char *EnumNameDriveConfig(DriveConfig e) {
  if (::flatbuffers::IsOutRange(e, DriveConfig_NONE, DriveConfig_MixedDriveConfig)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDriveConfig()[index];
}

template<typename T> struct DriveConfigTraits {
  static const DriveConfig enum_value = DriveConfig_NONE;
};

template<> struct DriveConfigTraits<fbs::TankDriveConfig> {
  static const DriveConfig enum_value = DriveConfig_TankDriveConfig;
};

template<> struct DriveConfigTraits<fbs::MixedDriveConfig> {
  static const DriveConfig enum_value = DriveConfig_MixedDriveConfig;
};

bool VerifyDriveConfig(::flatbuffers::Verifier &verifier, const void *obj, DriveConfig type);
bool VerifyDriveConfigVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct TankDriveConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TankDriveConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LEFT_RAD_S = 4,
    VT_RIGHT_RAD_S = 6
  };
  float left_rad_s() const {
    return GetField<float>(VT_LEFT_RAD_S, 0.0f);
  }
  float right_rad_s() const {
    return GetField<float>(VT_RIGHT_RAD_S, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_LEFT_RAD_S, 4) &&
           VerifyField<float>(verifier, VT_RIGHT_RAD_S, 4) &&
           verifier.EndTable();
  }
};

struct TankDriveConfigBuilder {
  typedef TankDriveConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_left_rad_s(float left_rad_s) {
    fbb_.AddElement<float>(TankDriveConfig::VT_LEFT_RAD_S, left_rad_s, 0.0f);
  }
  void add_right_rad_s(float right_rad_s) {
    fbb_.AddElement<float>(TankDriveConfig::VT_RIGHT_RAD_S, right_rad_s, 0.0f);
  }
  explicit TankDriveConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TankDriveConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TankDriveConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TankDriveConfig> CreateTankDriveConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float left_rad_s = 0.0f,
    float right_rad_s = 0.0f) {
  TankDriveConfigBuilder builder_(_fbb);
  builder_.add_right_rad_s(right_rad_s);
  builder_.add_left_rad_s(left_rad_s);
  return builder_.Finish();
}

struct MixedDriveConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MixedDriveConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RAD_S = 4,
    VT_DIRECTION = 6
  };
  float rad_s() const {
    return GetField<float>(VT_RAD_S, 0.0f);
  }
  float direction() const {
    return GetField<float>(VT_DIRECTION, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_RAD_S, 4) &&
           VerifyField<float>(verifier, VT_DIRECTION, 4) &&
           verifier.EndTable();
  }
};

struct MixedDriveConfigBuilder {
  typedef MixedDriveConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_rad_s(float rad_s) {
    fbb_.AddElement<float>(MixedDriveConfig::VT_RAD_S, rad_s, 0.0f);
  }
  void add_direction(float direction) {
    fbb_.AddElement<float>(MixedDriveConfig::VT_DIRECTION, direction, 0.0f);
  }
  explicit MixedDriveConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MixedDriveConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MixedDriveConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MixedDriveConfig> CreateMixedDriveConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float rad_s = 0.0f,
    float direction = 0.0f) {
  MixedDriveConfigBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_rad_s(rad_s);
  return builder_.Finish();
}

struct RobotDriveConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RobotDriveConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONFIG_TYPE = 4,
    VT_CONFIG = 6
  };
  fbs::DriveConfig config_type() const {
    return static_cast<fbs::DriveConfig>(GetField<uint8_t>(VT_CONFIG_TYPE, 0));
  }
  const void *config() const {
    return GetPointer<const void *>(VT_CONFIG);
  }
  template<typename T> const T *config_as() const;
  const fbs::TankDriveConfig *config_as_TankDriveConfig() const {
    return config_type() == fbs::DriveConfig_TankDriveConfig ? static_cast<const fbs::TankDriveConfig *>(config()) : nullptr;
  }
  const fbs::MixedDriveConfig *config_as_MixedDriveConfig() const {
    return config_type() == fbs::DriveConfig_MixedDriveConfig ? static_cast<const fbs::MixedDriveConfig *>(config()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONFIG_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONFIG) &&
           VerifyDriveConfig(verifier, config(), config_type()) &&
           verifier.EndTable();
  }
};

template<> inline const fbs::TankDriveConfig *RobotDriveConfig::config_as<fbs::TankDriveConfig>() const {
  return config_as_TankDriveConfig();
}

template<> inline const fbs::MixedDriveConfig *RobotDriveConfig::config_as<fbs::MixedDriveConfig>() const {
  return config_as_MixedDriveConfig();
}

struct RobotDriveConfigBuilder {
  typedef RobotDriveConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_config_type(fbs::DriveConfig config_type) {
    fbb_.AddElement<uint8_t>(RobotDriveConfig::VT_CONFIG_TYPE, static_cast<uint8_t>(config_type), 0);
  }
  void add_config(::flatbuffers::Offset<void> config) {
    fbb_.AddOffset(RobotDriveConfig::VT_CONFIG, config);
  }
  explicit RobotDriveConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RobotDriveConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RobotDriveConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RobotDriveConfig> CreateRobotDriveConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fbs::DriveConfig config_type = fbs::DriveConfig_NONE,
    ::flatbuffers::Offset<void> config = 0) {
  RobotDriveConfigBuilder builder_(_fbb);
  builder_.add_config(config);
  builder_.add_config_type(config_type);
  return builder_.Finish();
}

inline bool VerifyDriveConfig(::flatbuffers::Verifier &verifier, const void *obj, DriveConfig type) {
  switch (type) {
    case DriveConfig_NONE: {
      return true;
    }
    case DriveConfig_TankDriveConfig: {
      auto ptr = reinterpret_cast<const fbs::TankDriveConfig *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DriveConfig_MixedDriveConfig: {
      auto ptr = reinterpret_cast<const fbs::MixedDriveConfig *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyDriveConfigVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyDriveConfig(
        verifier,  values->Get(i), types->GetEnum<DriveConfig>(i))) {
      return false;
    }
  }
  return true;
}

inline const fbs::RobotDriveConfig *GetRobotDriveConfig(const void *buf) {
  return ::flatbuffers::GetRoot<fbs::RobotDriveConfig>(buf);
}

inline const fbs::RobotDriveConfig *GetSizePrefixedRobotDriveConfig(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fbs::RobotDriveConfig>(buf);
}

inline const char *RobotDriveConfigIdentifier() {
  return "OCDV";
}

inline bool RobotDriveConfigBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RobotDriveConfigIdentifier());
}

inline bool SizePrefixedRobotDriveConfigBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RobotDriveConfigIdentifier(), true);
}

inline bool VerifyRobotDriveConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::RobotDriveConfig>(RobotDriveConfigIdentifier());
}

inline bool VerifySizePrefixedRobotDriveConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::RobotDriveConfig>(RobotDriveConfigIdentifier());
}

inline void FinishRobotDriveConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::RobotDriveConfig> root) {
  fbb.Finish(root, RobotDriveConfigIdentifier());
}

inline void FinishSizePrefixedRobotDriveConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::RobotDriveConfig> root) {
  fbb.FinishSizePrefixed(root, RobotDriveConfigIdentifier());
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_OBCDRIVE_FBS_H_
