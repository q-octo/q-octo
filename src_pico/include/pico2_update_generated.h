// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PICO2UPDATE_FBS_H_
#define FLATBUFFERS_GENERATED_PICO2UPDATE_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fbs {

struct Pico2RX;
struct Pico2RXBuilder;

enum Button : int8_t {
  Button_A = 0,
  Button_B = 1,
  Button_X = 2,
  Button_Y = 3,
  Button_MIN = Button_A,
  Button_MAX = Button_Y
};

inline const Button (&EnumValuesButton())[4] {
  static const Button values[] = {
    Button_A,
    Button_B,
    Button_X,
    Button_Y
  };
  return values;
}

inline const char * const *EnumNamesButton() {
  static const char * const names[5] = {
    "A",
    "B",
    "X",
    "Y",
    nullptr
  };
  return names;
}

inline const char *EnumNameButton(Button e) {
  if (::flatbuffers::IsOutRange(e, Button_A, Button_Y)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesButton()[index];
}

struct Pico2RX FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Pico2RXBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUTTON = 4
  };
  fbs::Button button() const {
    return static_cast<fbs::Button>(GetField<int8_t>(VT_BUTTON, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_BUTTON, 1) &&
           verifier.EndTable();
  }
};

struct Pico2RXBuilder {
  typedef Pico2RX Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_button(fbs::Button button) {
    fbb_.AddElement<int8_t>(Pico2RX::VT_BUTTON, static_cast<int8_t>(button), 0);
  }
  explicit Pico2RXBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Pico2RX> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Pico2RX>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Pico2RX> CreatePico2RX(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fbs::Button button = fbs::Button_A) {
  Pico2RXBuilder builder_(_fbb);
  builder_.add_button(button);
  return builder_.Finish();
}

inline const fbs::Pico2RX *GetPico2RX(const void *buf) {
  return ::flatbuffers::GetRoot<fbs::Pico2RX>(buf);
}

inline const fbs::Pico2RX *GetSizePrefixedPico2RX(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fbs::Pico2RX>(buf);
}

inline const char *Pico2RXIdentifier() {
  return "PCO2";
}

inline bool Pico2RXBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Pico2RXIdentifier());
}

inline bool SizePrefixedPico2RXBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Pico2RXIdentifier(), true);
}

inline bool VerifyPico2RXBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::Pico2RX>(Pico2RXIdentifier());
}

inline bool VerifySizePrefixedPico2RXBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::Pico2RX>(Pico2RXIdentifier());
}

inline void FinishPico2RXBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::Pico2RX> root) {
  fbb.Finish(root, Pico2RXIdentifier());
}

inline void FinishSizePrefixedPico2RXBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::Pico2RX> root) {
  fbb.FinishSizePrefixed(root, Pico2RXIdentifier());
}

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_PICO2UPDATE_FBS_H_
